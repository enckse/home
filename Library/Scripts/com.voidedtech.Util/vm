#!/opt/local/bin/python
import argparse
import subprocess
import configparser
import shutil
import os
import time


_START_SESS = "start"
_CONSOLE_SESS = "console"
_COMPLETIONS = """#!/opt/local/bin/bash
_vm() {
    local cur opts
    cur=${COMP_WORDS[COMP_CWORD]}
    if [ $COMP_CWORD -eq 1 ]; then
        opts="start stop status extract attach"
        COMPREPLY=( $(compgen -W "$opts" -- $cur) )
    else
        if [ $COMP_CWORD -ge 2 ]; then
            opts="--config --session"
            case ${COMP_WORDS[1]} in
                "start")
                    opts="$opts --autoattach --noextract"
                    ;;
            esac
        fi
        if [ ! -z "$opts" ]; then
            COMPREPLY=( $(compgen -W "$opts" -- $cur) )
        fi
    fi
}

complete -F _vm -o bashdefault -o default vm
"""


class Object(object):
    """Dynamic expando object."""

    pass


class VM(object):
    """VM definition."""

    def __init__(self, cfg):
        """Init a VM from a config."""
        self.memory = cfg["system"]["memory"]
        self.root = cfg["system"]["root"]
        self.disk = cfg["system"]["disk"]
        self.params = cfg["system"]["params"]
        self.tty = cfg["system"]["tty"]
        self.root = cfg["system"]["root"]
        self.kernel = Object()
        self.initrd = Object()
        self.boot = Object()
        setattr(self.boot, "enable", bool(cfg["boot"]["enable"]))
        setattr(self.boot, "size", cfg["boot"]["size"])
        setattr(self.boot, "file", cfg["boot"]["file"])
        setattr(self.boot, "dir", cfg["boot"]["dir"])
        setattr(self.kernel, "name", cfg["kernel"]["name"])
        setattr(self.kernel, "gzipped", bool(cfg["kernel"]["gzip"]))
        setattr(self.initrd, "name", cfg["initram"]["name"])
        setattr(self.initrd, "gzipped", bool(cfg["initram"]["gzip"]))
        self.volume = os.path.join("/Volumes", self.boot.dir)


def _extract(vm):
    if _extract_images(vm):
        if not _manage_image(False, vm.volume, vm.root):
            raise Exception("unable to unmount")


def _extract_images(vm):
    if not vm.boot.enable:
        return False
    print("extracting boot objects")
    boot_file = vm.boot.file + ".dmg"
    try:
        if not _manage_image(True, boot_file, vm.root):
            raise Exception("unable to mount boot file")
        initrd = None
        vmlinuz = None
        for d in sorted([x for x in os.listdir(vm.volume)]):
            path = os.path.join(vm.volume, d)
            if d.startswith(vm.initrd.name):
                initrd = path
            elif d.startswith(vm.kernel.name):
                vmlinuz = path
        if initrd is None or vmlinuz is None:
            print("no initrd/vmlinuz found")
            return True
        print("initrd:  {}\nvmlinuz: {}".format(initrd, vmlinuz))
        _copy_backup(vm.root, initrd, vm.initrd.gzipped)
        _copy_backup(vm.root, vmlinuz, vm.kernel.gzipped)
    finally:
        _manage_image(False, vm.volume, vm.root)


def _copy_backup(root, object_path, gzipped):
    print("updating: {}".format(object_path))
    bname = os.path.basename(object_path)
    target = os.path.join(root, bname)
    if subprocess.run(["cp", target, target + ".old"]).returncode != 0:
        raise Exception("unable to backup object")
    if gzipped:
        target += ".gz"
    if subprocess.run(["cp", object_path, target]).returncode != 0:
        raise Exception("unable to copy new object")
    if gzipped:
        rt = subprocess.run(["gzip", "-d", "-f", target],
                            cwd=root).returncode
        if rt != 0:
            raise Exception("failed to gzip")


def _manage_image(mounting, path, root):
    cmd = "attach"
    if not mounting:
        cmd = "unmount"
    return subprocess.run(["hdiutil", cmd, path], cwd=root).returncode == 0


def _name_session(prefix, name):
    return "{}-{}".format(prefix, name)


def _attach(vm, session):
    if not _session_exists(_START_SESS, session):
        print("no session found")
        return
    name = _name_session(_CONSOLE_SESS, session)
    if _session_exists(_CONSOLE_SESS, session):
        print("restoring console")
        if subprocess.run(["screen", "-r", "-S", name]).returncode != 0:
            print("unable to restore")
        return
    tty_file = os.path.join(vm.root, vm.tty)
    with open(tty_file, "r") as f:
        tty = f.read().strip()
        if subprocess.run(["screen", "-S", name, tty]).returncode != 0:
            print("unable to attach to tty")


def _stop(session):
    if not _session_exists(_START_SESS, session):
        return
    if subprocess.run(["killall", "vftool"]).returncode != 0:
        print("unable to exit vftool")


def _session_exists(prefix, session):
    name = _name_session(prefix, session)
    cmd = ["screen", "-S", name, "-X", "select", "."]
    return subprocess.run(cmd).returncode == 0


def _start_vm(vm, session):
    sess = _name_session(_START_SESS, session)
    cmd = ["screen", "-D", "-m", "-S", sess]
    cmd += ["vftool", "-k", vm.kernel.name, "-i", vm.initrd.name]
    cmd += ["-m", vm.memory, "-d", vm.disk]
    cmd += ["-a", vm.params, "-y", os.path.join(vm.root, vm.tty)]
    if vm.boot.enable:
        cmd += ["-d", vm.boot.file + ".dmg"]
    p = subprocess.Popen(cmd, cwd=vm.root)


def main():
    """Program entry."""
    try:
        _vm()
    except Exception as e:
        print(e)
        exit(1)


def _status(session):
    _session_exists(_START_SESS, session)
    _session_exists(_CONSOLE_SESS, session)


def _create_disk(file, size, folder, root):
    cmd = ["hdiutil", "create", file, "-size", size, "-srcfolder", folder]
    cmd += ["-fs", "exFAT", "-format", "UDRW"]
    return subprocess.run(cmd, cwd=root).returncode == 0


def _start(vm, session, no_extract, auto_attach):
    print("starting vm")
    if _session_exists(_START_SESS, session):
        print("already running")
        return
    if os.path.exists(vm.tty):
        os.remove(vm.tty)
    if vm.boot.enable:
        boot_file = os.path.join(vm.root, vm.boot.file + ".dmg")
        if not os.path.exists(boot_file):
            print('creating boot file')
            boot_tmp = os.path.join(vm.root, vm.boot.dir)
            if not os.path.exists(boot_tmp):
                os.makedirs(boot_tmp)
            if not _create_disk(vm.boot.file, vm.boot.size, boot_tmp, vm.root):
                raise Exception("unable to create boot disk")
            shutil.rmtree(boot_tmp)
    if not no_extract:
        _extract(vm)
    print("starting session")
    _start_vm(vm, session)
    if auto_attach > 0:
        print("auto attaching...")
        time.sleep(auto_attach)
        _attach(vm, session)


def _vm():
    parser = argparse.ArgumentParser()
    parser.add_argument("command")
    parser.add_argument("--config", default="/Users/enck/VM/vm.config")
    parser.add_argument("--session", default="vftools")
    parser.add_argument("--autoattach", default=5, type=int)
    parser.add_argument("--noextract", action="store_true")
    args = parser.parse_args()
    cmd = args.command
    cfg = configparser.ConfigParser()
    cfg.read(args.config)
    vm = VM(cfg)
    if cmd == "extract":
        _extract(vm)
    elif cmd == "attach":
        _attach(vm, args.session)
    elif cmd == "stop":
        _stop(args.session)
    elif cmd == "status":
        _status(args.session)
    elif cmd == "start":
        _start(vm, args.session, args.noextract, args.autoattach)
    elif cmd == "completions":
        print(_COMPLETIONS)
    else:
        raise Exception("unknown command")


if __name__ == "__main__":
    main()
