#!/bin/bash
source $HOME/.bin/common
SEARCH_KEY="search"
SEARCH_PRIVATE_KEY="search-private"
CLIPBOARD_KEY="clipboard"
EDITOR_KEY="editor"
PASSWORD_KEY="passwords"
VOLUME_KEY="volume"
REBUILD_KEY="rebuild"
CLEAR_MAIL_KEY="mail-clear"
SSID_KEY="ssid"
TREE_KEY="tree-dir"
CHECKSUM_KEY="checksum"
LOGGING_KEY="logging"
SNAPSHOT_KEY="snapshot"
PASS_FILE=/mnt/Synced/passwords
CACHE_PATH=$HOME/.cache/helper_cache/
WORKING=/opt/workspace/shared



function searching()
{
    if [ -z "$2" ]; then
        echo "requires a search term"
        exit -1
    fi
    SEARCH=""
    for term in ${@:2}; do
        SEARCH=$SEARCH" $(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$term")"
    done
    ARGS="--new-window $1"
    chromium "http://www.google.com/search?q=$SEARCH" $ARGS
}

function file-required()
{
    if [ ! -z $1 ]; then
        if [ -e $1 ]; then
            return 0
        fi
    fi
    
    echo "file required..."
    exit -1
}

function passwords()
{
    keepassx2 $PASS_FILE
}

function rebuild-now()
{
    mkdir -p $CACHE_PATH
    rm ${CACHE_PATH}*
    for line in $(print-help | cut -d " " -f 5); do
        if [[ "$line" == "$REBUILD_KEY" ]]; then
            continue
        fi
        file_name=${CACHE_PATH}$line
        echo "#/bin/bash
helper_cache $line \$@" > $file_name
        chmod u+x $file_name
    done
}

function print-help()
{
    echo "
    $SEARCH_KEY (search)
    $SEARCH_PRIVATE_KEY (search privately)
    $CLIPBOARD_KEY (copy file contents to clipboard)
    $EDITOR_KEY (open an editor)
    $PASSWORD_KEY (password management)
    $VOLUME_KEY (volume mixer)
    $REBUILD_KEY (rebuild cache)
    $CLEAR_MAIL_KEY (clear mail)
    $SSID_KEY (discover a hidden SSID)
    $SNAPSHOT_KEY (snapshot workspace)
    $CHECKSUM_KEY (get checksum of files under this directory)
    $TREE_KEY (get file and directory tree structure)
    $LOGGING_KEY (systemd logging by journal type: $ALL_JOURNAL_CATEGORIES) 
"
}

function run-terminal()
{
    lxterminal --command "$1"
}

function editor()
{
    run-terminal "vim"
}

function volume-mixer()
{
    run-terminal "alsamixer"
}

function snapshot()
{
    STAGE=$USER_TMP/git/
    DATE=`date +%Y-%m-%d`
    SNAP_FILE=$PWD/snapshot-$DATE.tar.gz
    mkdir -p $STAGE
    for f in $(ls $WORKING); do
	    REPO="$WORKING/$f"
    	if [ -e "$REPO/.git" ]; then
    		cd $REPO
            echo "bundling $f"
		    git bundle create $STAGE$f.bundle --all &> /dev/null
    	fi
    done
    CUR_DIR=$PWD
    cd $STAGE && tar -cvzf $SNAP_FILE * && cd $CUR_DIR
    rm -rf $STAGE
}

function get-tree()
{
    tree .
}

function get-checksum()
{
    find -type f -exec sha512sum "{}" + | sort -k 2
}

function clear-mail()
{
    echo 'd *' | mail -N
}

function hidden-ssid()
{
    if [ -z "$1" ]; then
        echo "ssid required..."
        exit -1
    fi
    sudo iwlist wlp3s0 scanning essid $1
}

function get-systemd-logging()
{
    CATEGORIES=" "$ALL_JOURNAL_CATEGORIES
    ALT_CATEGORIES=""
    for cat in $(echo $@); do
        matched=""
        for all in $(echo "$CATEGORIES"); do
           if [[ ""$cat"" == "$all" ]]; then
               matched=$cat 
               break
           fi 
        done
        if [ -z "$matched" ]; then
            echo "invalid category: $cat (valid: $ALL_JOURNAL_CATEGORIES)"
            exit -1
        fi

        ALT_CATEGORIES=$ALT_CATEGORIES" $cat"
    done

    if [ ! -z "$ALT_CATEGORIES" ]; then
        CATEGORIES=$ALT_CATEGORIES
    fi

    CATEGORIES=" "$(echo "$CATEGORIES" | sed "s/ / -t /g")
    journalctl $CATEGORIES
}

if [ ! -z $1 ]; then
    NEED_HELP=0
    case $1 in
        $PASSWORD_KEY)
            passwords
            ;;
        $SEARCH_KEY)
            searching "" ${@:2}
            ;;
        $SEARCH_PRIVATE_KEY)
            searching "--incognito" ${@:2}
            ;;
        $CLIPBOARD_KEY)
            file-required $2
            cat $2 | xclip -selection c
            ;;
        $EDITOR_KEY)
            editor
            ;;
        $VOLUME_KEY)
            volume-mixer
            ;;
        $REBUILD_KEY)
            rebuild-now
            ;;
        $CLEAR_MAIL_KEY)
            clear-mail
            ;;
        $SSID_KEY)
            hidden-ssid "$2"
            ;;
        $SNAPSHOT_KEY)
            snapshot
            ;;
        $TREE_KEY)
            get-tree
            ;;
        $CHECKSUM_KEY)
            get-checksum
            ;;
        $LOGGING_KEY)
            get-systemd-logging "${@:2}"
            ;;
        *)
            NEED_HELP=1
            ;;
    esac
    
    if [ $NEED_HELP -eq 0 ]; then
         exit 0
    fi
fi

print-help
