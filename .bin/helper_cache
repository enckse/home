#!/bin/bash
source $HOME/.bin/common
source $HOME/.bin/system_stats
SEARCH_KEY="search"
SEARCH_PRIVATE_KEY="search-private"
CLIPBOARD_KEY="clipboard"
PASSWORD_KEY="passwords"
VOLUME_KEY="volume"
REBUILD_KEY="rebuild"
SSID_KEY="ssid"
LOGGING_KEY="logging"
LOGGING_ALL_KEY="logging-all"
SNAPSHOT_KEY="snapshot"
MARKDOWN_KEY="markdown"
CHROME_KEY="chrome"
PRIVATE_KEY="-private"
WIFI_TOGGLE_KEY="wifi_toggle"
MOUSE_TOGGLE_KEY="touchpad_toggle"
FORCE_SYNC_KEY="force-sync"
CHROME_PRIVATE_KEY="$CHROME_KEY$PRIVATE_KEY"
GOOGLE_CHROME_KEY="google-chrome"
INSTALL_CHROME_KEY="setup-chrome"
GOOGLE_CHROME_PRIVATE_KEY="$GOOGLE_CHROME_KEY$PRIVATE_KEY"
PASS_FILE=/mnt/Synced/passwords
CACHE_PATH=$HOME/.cache/helper_cache/
WORKING=/opt/workspace/shared
STORAGE=$USER_TMP/markdown-preview/
STATS_KEY="i3-system-stats"
STATS_SECOND_KEY="i3-system-stats-secondary"

function force-sync()
{
    touch $SYNC_NOW
}

function markdown()
{
    mkdir -p $STORAGE
    find ${STORAGE}* -type f -mtime +1 -delete &> /dev/null

    ID=$RANDOM
    printf -v ID "%05d" $ID
    NOW=$(date +%s)
    FILE_NAME=${STORAGE}/$NOW-$ID.html
    pandoc -o $FILE_NAME -f markdown $1
    (chromium $FILE_NAME &) &>/dev/null
}

function searching()
{
    if [ -z "$2" ]; then
        echo "requires a search term"
        exit -1
    fi
    SEARCH=""
    for term in ${@:2}; do
        SEARCH=$SEARCH" $(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$term")"
    done
    ARGS="--new-window $1"
    chromium "http://www.google.com/search?q=$SEARCH" $ARGS
}

function open-browser()
{
    $1 "--new-window" "$2" "$3"
}

function file-required()
{
    if [ ! -z $1 ]; then
        if [ -e $1 ]; then
            return 0
        fi
    fi
    
    echo "file required..."
    exit -1
}

function passwords()
{
    keepassx2 $PASS_FILE
}

function rebuild-now()
{
    mkdir -p $CACHE_PATH
    rm ${CACHE_PATH}*
    for line in $(print-help | cut -d " " -f 5); do
        if [[ "$line" == "$REBUILD_KEY" ]]; then
            continue
        fi
        file_name=${CACHE_PATH}$line
        echo "#/bin/bash
helper_cache $line \$@" > $file_name
        chmod u+x $file_name
    done
}

function print-help()
{
    echo "
    $SEARCH_KEY (search)
    $SEARCH_PRIVATE_KEY (search privately)
    $CLIPBOARD_KEY (copy file contents to clipboard)
    $PASSWORD_KEY (password management)
    $VOLUME_KEY (volume mixer)
    $REBUILD_KEY (rebuild cache)
    $SSID_KEY (discover a hidden SSID)
    $SNAPSHOT_KEY (snapshot workspace)
    $LOGGING_KEY (systemd logging by journal type and today: $ALL_JOURNAL_CATEGORIES) 
    $LOGGING_ALL_KEY (systemd logging by journal type: $ALL_JOURNAL_CATEGORIES) 
    $MARKDOWN_KEY (markdown output generation)
    $GOOGLE_CHROME_KEY (start google chrome browsing)
    $CHROME_KEY (start chromium browsing)
    $GOOGLE_CHROME_PRIVATE_KEY (start private google chrome browsing)
    $CHROME_PRIVATE_KEY (start private chromium browsing)
    $STATS_KEY (primary display i3 status)
    $STATS_SECOND_KEY (secondary display i3 status)
    $INSTALL_CHROME_KEY (install chrome)
    $WIFI_TOGGLE_KEY (enable/disable wifi resume on wake)
    $MOUSE_TOGGLE_KEY (toggle touchpad on/off)
    $FORCE_SYNC_KEY (force syncing)
"
}

function run-terminal()
{
    lxterminal --command "$1"
}

function volume-mixer()
{
    run-terminal "alsamixer"
}

function snapshot()
{
    STAGE=$USER_TMP/git/
    DATE=`date +%Y-%m-%d`
    SNAP_FILE=$PWD/snapshot-$DATE.tar.gz
    mkdir -p $STAGE
    for f in $(ls $WORKING); do
	    REPO="$WORKING/$f"
    	if [ -e "$REPO/.git" ]; then
    		cd $REPO
            echo "bundling $f"
		    git bundle create $STAGE$f.bundle --all &> /dev/null
    	fi
    done
    CUR_DIR=$PWD
    cd $STAGE && tar -cvzf $SNAP_FILE * && cd $CUR_DIR
    rm -rf $STAGE
}

function hidden-ssid()
{
    if [ -z "$1" ]; then
        echo "ssid required..."
        exit -1
    fi
    sudo iwlist wlp109s0 scanning essid $1
}

function wifi-toggle()
{
    if [ -e $WIFI_OFF ]; then
        rm -f $WIFI_OFF
    else
        touch $WIFI_OFF
    fi 
}

function install-chrome()
{
    chromium_version=$(chromium --version | cut -d " " -f 2)
    google_version=$(google-chrome-stable --version | cut -d " " -f 3)
    if [[ $chromium_version == $google_version ]]; then
        read -p "same version detected, process (y/n)? " yn
        if [[ -z $yn ]] || [[ "$yn" != "y" ]]; then
            exit 0
        fi
    fi
    id=$(uuidgen)
    file_name=/tmp/chrome-$id.rpm
    wget -O $file_name https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
    current=$PWD
    cd /tmp
    mkdir -p chrome-install
    rm -rf chrome-install/*
    cd chrome-install
    rpmextract.sh $file_name
    sudo rm -rf /opt/google/chrome/
    sudo mv opt/google/chrome/ /opt/google/
    sudo mv usr/bin/google-chrome-stable /usr/bin/google-chrome-stable
    sudo chown root:root /opt/google/chrome/chrome-sandbox
    sudo chmod 4755 /opt/google/chrome/chrome-sandbox
    echo ""
    echo "version information"
    echo "-------------------"
    chromium --version
    google-chrome-stable --version
    cd $current
}

function get-systemd-logging()
{

    CATEGORIES=" "$ALL_JOURNAL_CATEGORIES
    ALT_CATEGORIES=""
    for cat in $(echo ${@:2}); do
        matched=""
        for all in $(echo "$CATEGORIES"); do
           if [[ ""$cat"" == "$all" ]]; then
               matched=$cat 
               break
           fi 
        done
        if [ -z "$matched" ]; then
            echo "invalid category: $cat (valid: $ALL_JOURNAL_CATEGORIES)"
            exit -1
        fi

        ALT_CATEGORIES=$ALT_CATEGORIES" $cat"
    done

    if [ ! -z "$ALT_CATEGORIES" ]; then
        CATEGORIES=$ALT_CATEGORIES
    fi

    CATEGORIES=" "$(echo "$CATEGORIES" | sed "s/ / -t /g")
    MATCH_ALL=""
    if [ $1 -eq 0 ]; then
        MATCH_ALL=$(date "+%b %d") 
    fi
    journalctl $CATEGORIES | grep "$MATCH_ALL"
}
 
if [ ! -z $1 ]; then
    NEED_HELP=0
    case $1 in
        $PASSWORD_KEY)
            passwords
            ;;
        $SEARCH_KEY)
            searching "" ${@:2}
            ;;
        $SEARCH_PRIVATE_KEY)
            searching "--incognito" ${@:2}
            ;;
        $CLIPBOARD_KEY)
            file-required $2
            cat $2 | xclip -selection c
            ;;
        $VOLUME_KEY)
            volume-mixer
            ;;
        $REBUILD_KEY)
            rebuild-now
            ;;
        $SSID_KEY)
            hidden-ssid "$2"
            ;;
        $SNAPSHOT_KEY)
            snapshot
            ;;
        $LOGGING_KEY | $LOGGING_ALL_KEY)
            DO_ALL=0
            if [[ "$1" == "$LOGGING_ALL_KEY" ]]; then
                DO_ALL=1
            fi
            get-systemd-logging $DO_ALL "${@:2}"
            ;;
        $GOOGLE_CHROME_KEY | $CHROME_KEY | $GOOGLE_CHROME_PRIVATE_KEY | $CHROME_PRIVATE_KEY)
            browsing="chromium"
            if [[ "$1" == "$GOOGLE_CHROME_KEY" ]] || [[ "$1" == "$GOOGLE_CHROME_PRIVATE_KEY" ]]; then
                browsing="google-chrome-stable"
            fi
            
            added_arg=""
            if [[ "$1" == "$CHROME_PRIVATE_KEY" ]] || [[ "$1" == "$GOOGLE_CHROME_PRIVATE_KEY" ]]; then
                added_arg="--incognito"
            fi
    
            open-browser "$browsing" "$added_arg" "$2"
            ;;
        $MARKDOWN_KEY)
            file-required $2
            markdown $2
            ;;
        $STATS_SECOND_KEY | $STATS_KEY)
            ARGS=""
            if [[ "$1" == "$STATS_SECOND_KEY" ]]; then
                ARGS="$STAT_SECONDARY"
            fi
            i3-stat $ARGS
            ;;
        $INSTALL_CHROME_KEY)
            install-chrome
            ;;
        $WIFI_TOGGLE_KEY)
            wifi-toggle
            ;;
        $MOUSE_TOGGLE_KEY)
            toggle-touchpad
            ;;
        $FORCE_SYNC_KEY)
            force-sync
            ;;
        *)
            NEED_HELP=1
            ;;
    esac
    
    if [ $NEED_HELP -eq 0 ]; then
         exit 0
    fi
fi

print-help
