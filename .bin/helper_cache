#!/bin/bash
source $HOME/.bin/common
SEARCH_KEY="search"
SEARCH_PRIVATE_KEY="search-private"
PASSWORD_KEY="passwords"
VOLUME_KEY="volume"
REBUILD_KEY="rebuild"
SSID_KEY="ssid"
MARKDOWN_KEY="markdown"
CHROME_KEY="chrome"
PRIVATE_KEY="-private"
MOUSE_TOGGLE_KEY="touchpad-toggle"
CSV_PROC_KEY="csv-processing"
CHROME_PRIVATE_KEY="$CHROME_KEY$PRIVATE_KEY"
GOOGLE_CHROME_KEY="google-chrome"
INSTALL_CHROME_KEY="setup-chrome"
PROXY_CHROME_KEY="chrome-proxy"
TEXT_EDITOR_KEY="text-editor"
DMENU_KEY="dmenu-wrapper"
SOCKS_KEY="socks"
VIRTMAN_KEY="virtman"
GOOGLE_CHROME_PRIVATE_KEY="$GOOGLE_CHROME_KEY$PRIVATE_KEY"
PASS_FILE=${SYNCED_PATH}passwords
CACHE_PATH=$HOME/.cache/helper_cache/
WORKING=/opt/workspace/shared
STORAGE=$USER_TMP/markdown-preview/
VIMRC=$HOME/.vimrc
VIMRC_TXT=$HOME/.vimrc_text
VIMRC_TMP=$USER_TMP/.vimrc_txt
DMENU_LIST="$VIRTMAN_KEY $SEARCH_KEY $SEARCH_PRIVATE_KEY $PASSWORD_KEY $VOLUME_KEY $CHROME_KEY $CHROME_PRIVATE_KEY $GOOGLE_CHROME_KEY $GOOGLE_CHROME_PRIVATE_KEY $PROXY_CHROME_KEY"
DMENU_INCLUDE="$HOME/.config/menus/dmenu_entries"
START_PORT=$((PROXY_PORT+1))
END_PORT=$((START_PORT+1000))

function virtman()
{
    ssh-agent-eval
    virt-manager
}

function socks()
{
    if [ -z "$1" ]; then
        echo "host required"
        exit -1
    fi
    host=$1
    port=$2
    if [ -z "$port" ]; then
        port=$(shuf -i ${START_PORT}-${END_PORT} -n 1)
    fi
    echo "connecting to $host via $port"
    cmd=$(socks-command "$port" "$host")
    if [ $? -ne 0 ]; then
        echo "unable to open connection..."
        echo $cmd
        exit -1
    fi
    $cmd
}

function text-editor()
{
    cat $VIMRC | grep -v "^set nowrap" > $VIMRC_TMP
    cat $VIMRC_TXT >> $VIMRC_TMP
    cmd="vim -Nu $VIMRC_TMP $@"
    $cmd
}

function dmenu-wrapper()
{
    if [ ! -e $DMENU_ENTRIES ]; then
        TMP_DMENU=$DMENU_ENTRIES.tmp
        rm -f $TMP_DMENU
        for item in $(echo $DMENU_LIST); do
            echo $item >> $TMP_DMENU
        done 
        if [ -e $DMENU_INCLUDE ]; then
            cat $DMENU_INCLUDE >> $TMP_DMENU
        fi
        ls $URL_COMMON | grep -v "$INDEX_EXT$" >> $TMP_DMENU
        cat $TMP_DMENU | sort > $DMENU_ENTRIES
        rm -f $TMP_DMENU
    fi
    cat $DMENU_ENTRIES | dmenu "$@" | ${SHELL:-"/bin/sh"} &
}

function proxy-chrome()
{
    use_port=$PROXY_PORT
    if [ ! -z "$1" ]; then
        use_port=$1
    fi
    chromium --proxy-server="socks5://localhost:$use_port" --host-resolver-rules="MAP * 0.0.0.0 , EXCLUDE localhost"
}

function markdown()
{
    mkdir -p $STORAGE
    find ${STORAGE}* -type f -mtime +1 -delete &> /dev/null

    ID=$RANDOM
    printf -v ID "%05d" $ID
    NOW=$(date +%s)
    FILE_NAME=${STORAGE}/$NOW-$ID.html
    pandoc -o $FILE_NAME -f markdown $1
    (chromium $FILE_NAME &) &>/dev/null
}

function searching()
{
    if [ -z "$2" ]; then
        echo "requires a search term"
        exit -1
    fi
    SEARCH=""
    for term in ${@:2}; do
        SEARCH=$SEARCH" $(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$term")"
    done
    ARGS="--new-window $1"
    chromium "http://www.google.com/search?q=$SEARCH" $ARGS
}

function open-browser()
{
    $1 "--disk-cache-dir=/tmp/cache/$1" "--new-window" "$2" "$3"
}

function file-required()
{
    if [ ! -z $1 ]; then
        if [ -e $1 ]; then
            return 0
        fi
    fi
    
    echo "file required..."
    exit -1
}

function passwords()
{
    keepassx2 $PASS_FILE
}

function rebuild-now()
{
    mkdir -p $CACHE_PATH
    rm ${CACHE_PATH}*
    for line in $(print-help | cut -d " " -f 5); do
        if [[ "$line" == "$REBUILD_KEY" ]]; then
            continue
        fi
        file_name=${CACHE_PATH}$line
        echo "#/bin/bash
helper_cache $line \$@" > $file_name
        chmod u+x $file_name
    done
}

function print-help()
{
    res=$(get-help | grep -v -e '^$' | sort)
    echo "
$res
"
}

function get-help()
{
    echo "
    $SEARCH_KEY (search)
    $SEARCH_PRIVATE_KEY (search privately)
    $PASSWORD_KEY (password management)
    $VOLUME_KEY (volume mixer)
    $REBUILD_KEY (rebuild cache)
    $SSID_KEY (discover a hidden SSID)
    $MARKDOWN_KEY (markdown output generation)
    $GOOGLE_CHROME_KEY (start google chrome browsing)
    $CHROME_KEY (start chromium browsing)
    $GOOGLE_CHROME_PRIVATE_KEY (start private google chrome browsing)
    $CHROME_PRIVATE_KEY (start private chromium browsing)
    $INSTALL_CHROME_KEY (install chrome)
    $MOUSE_TOGGLE_KEY (toggle touchpad on/off)
    $CSV_PROC_KEY (csv processing)
    $PROXY_CHROME_KEY (chrome with SOCKS proxy)
    $TEXT_EDITOR_KEY (text editor/documentation editor)
    $DMENU_KEY (dmenu wrapper)
    $SOCKS_KEY (socks proxying)
    $VIRTMAN_KEY (virt-manager with ssh agent loaded)
"
}

function run-terminal()
{
    lxterminal --command "$1"
}

function volume-mixer()
{
    run-terminal "alsamixer"
}

function hidden-ssid()
{
    if [ -z "$1" ]; then
        echo "ssid required..."
        exit -1
    fi
    sudo iwlist wlp109s0 scanning essid $1
}

function csv-processing()
{
    $HOME/.bin/modules/csv-stats/csvstats.sh $1
}

function install-chrome()
{
    chromium_version=$(chromium --version | cut -d " " -f 2)
    google_version=$(google-chrome-stable --version | cut -d " " -f 3)
    if [[ $chromium_version == $google_version ]]; then
        read -p "same version detected, proceed (y/n)? " yn
        if [[ -z $yn ]] || [[ "$yn" != "y" ]]; then
            exit 0
        fi
    fi
    id=$(uuidgen)
    file_name=/tmp/chrome-$id.rpm
    wget -O $file_name https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
    current=$PWD
    cd /tmp
    mkdir -p chrome-install
    rm -rf chrome-install/*
    cd chrome-install
    rpmextract.sh $file_name
    sudo rm -rf /opt/google/chrome/
    sudo mv opt/google/chrome/ /opt/google/
    sudo mv usr/bin/google-chrome-stable /usr/bin/google-chrome-stable
    sudo chown root:root /opt/google/chrome/chrome-sandbox
    sudo chmod 4755 /opt/google/chrome/chrome-sandbox
    echo ""
    echo "version information"
    echo "-------------------"
    chromium --version
    google-chrome-stable --version
    cd $current
}

if [ ! -z $1 ]; then
    NEED_HELP=0
    case $1 in
        $SOCKS_KEY)
            socks ${@:2}
            ;;
        $PASSWORD_KEY)
            passwords
            ;;
        $SEARCH_KEY)
            searching "" ${@:2}
            ;;
        $SEARCH_PRIVATE_KEY)
            searching "--incognito" ${@:2}
            ;;
        $VOLUME_KEY)
            volume-mixer
            ;;
        $REBUILD_KEY)
            rebuild-now
            ;;
        $SSID_KEY)
            hidden-ssid "$2"
            ;;
        $GOOGLE_CHROME_KEY | $CHROME_KEY | $GOOGLE_CHROME_PRIVATE_KEY | $CHROME_PRIVATE_KEY)
            browsing="chromium"
            if [[ "$1" == "$GOOGLE_CHROME_KEY" ]] || [[ "$1" == "$GOOGLE_CHROME_PRIVATE_KEY" ]]; then
                browsing="google-chrome-stable"
            fi
            
            added_arg=""
            if [[ "$1" == "$CHROME_PRIVATE_KEY" ]] || [[ "$1" == "$GOOGLE_CHROME_PRIVATE_KEY" ]]; then
                added_arg="--incognito"
            fi
    
            open-browser "$browsing" "$added_arg" "$2"
            ;;
        $MARKDOWN_KEY)
            file-required $2
            markdown $2
            ;;
        $INSTALL_CHROME_KEY)
            install-chrome
            ;;
        $MOUSE_TOGGLE_KEY)
            toggle-touchpad
            ;;
        $CSV_PROC_KEY)
            csv-processing $2
            ;;
        $PROXY_CHROME_KEY)
            proxy-chrome $2
            ;;
        $TEXT_EDITOR_KEY)
            text-editor ${@:2}
            ;;
        $DMENU_KEY)
            dmenu-wrapper ${@:2}
            ;;
        $VIRTMAN_KEY)
            virtman
            ;;
        *)
            NEED_HELP=1
            ;;
    esac
    
    if [ $NEED_HELP -eq 0 ]; then
         exit 0
    fi
fi

print-help
