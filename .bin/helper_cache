#!/bin/bash
source $HOME/.bin/common
SEARCH_KEY="search"
PASSWORD_KEY="passwords"
VOLUME_KEY="volume"
REBUILD_KEY="rebuild"
PRIVATE_KEY="-private"
BROWSER_KEY="browser"
BROWSER_PRIVATE_KEY="$BROWSER_KEY$PRIVATE_KEY"
FIREFOX_KEY="ff"
FIREFOX_PRIVATE_KEY="$FIREFOX_KEY$PRIVATE_KEY"
DMENU_KEY="dmenu-wrapper"
PERM_UPDATE_KEY="perm-pull"
PERM_PUSH_KEY="perm-push"
ENTER_KEY="enterkeys"
AUTO_CLIP_KEY="auto-clip"
ARCH_CHROOT_KEY="archroot"
MACHINECTL_NSPAWN_KEY="machinectl-nspawn"
SUITE_KEY="suite"
PASS_FILE=${SYNCED_PATH}passwords
CACHE_PATH=$HOME/.cache/helper_cache/
WORKING=/opt/workspace/shared
DMENU_LIST="$SEARCH_KEY $PASSWORD_KEY $VOLUME_KEY $FIREFOX_KEY $FIREFOX_PRIVATE_KEY $SUITE_KEY $BROWSER_KEY $BROWSER_PRIVATE_KEY"
DMENU_INCLUDE="$HOME/.config/menus/dmenu_entries"
ENTRIES=$HOME/.config/window.entries
SUITE_FILE="$SYNCED_CONF/suite.dmenu_urls"
BROWSER_WINDOW="Nightly"
BASH_HIST="bash-history"
BASH_NEW_HISTORY=$USER_TMP/bash_history.tmp

function cleanup-bash-history()
{
    python -c "
import operator
with open('$BASH_HISTORY') as f:
    lines = [x.strip() for x in f.readlines()]
    cur = {}
    idx = 0
    for l in lines:
        cur[l] = idx
        idx = idx + 1
    vals = sorted(cur.items(), key=operator.itemgetter(1))
    with open('$BASH_NEW_HISTORY', 'w') as w:
        for l in vals:
            w.write(l[0])
            w.write('\n')
"
    new_count=$(cat $BASH_NEW_HISTORY | wc -l)
    old_count=$(cat $BASH_HISTORY | wc -l)
    echo "history cleaned up, entries: $new_count (previous: $old_count)"
    read -p "save cleaned up history (y/n)? " yn
    if [[ "$yn" == "y" ]]; then
        cat $BASH_NEW_HISTORY > $BASH_HISTORY
        update-time "history"
    fi
}

function suite-open()
{
    all=""
    for f in  $(cat $SUITE_FILE); do
        next=$(echo $f | cut -d " " -f 1)
        entry=$(dmenu_urls --entry $f)
        all=$all" "$entry
    done
    firefox $all
}

function make-nspawn()
{
    if [ -z "$1" ]; then
        echo "operation required"
        exit
    fi
    if [ -z "$2" ]; then
        echo "target required"
        exit
    fi
    sudo make $1 -f $HOME/.bin/makefile.nspawn TARGET=$2 ${@:3}
}

function auto-clip()
{
    source $PRIV_CONF
    auto-clipboard $PERM_LOCATION
}

function enter-keys()
{
    if [ -e $ENTRIES ]; then
        source $ENTRIES
    fi


    if [ -z $1 ]; then
        echo "must provide input"
    else
        using=$1
        ran=0
        if [ -e $ENTRIES ]; then
            result=$($ENTRIES $using)
            if [ ! -z "$result" ]; then
                ran=1
                enter-window-vals $BROWSER_WINDOW $result
            fi
        fi
        if [ $ran -eq 0 ]; then
            enter-window-vals $BROWSER_WINDOW $@
        fi
    fi
}

function push-pull-git-fxn()
{
    is_avail=$(test-ssh $BASE_SERVER)
    cpwd=$PWD
    for f_name in $(get-perm-objs); do
        f=$(basename $f_name)
        cd $f_name
        echo "$1: $f"
        if [[ $f == *${PERM_PERSONAL}* ]]; then
            if [ $is_avail -ne $IS_CONNECTED ]; then
                echo "**not available**"
                echo
                continue
            fi
        fi
        git $2
        echo
    done
    cd $cpwd
    update-time "perm-$2"
}

function update-chroot()
{
    epiphyte-archroot update
}

function arch-chroot-manage()
{
    if [ -d $CHROOT ]; then
        update-chroot
    fi
    if [ ! -d $CHROOT ]; then
        mkdir -p $CHROOT
        epiphtey-archroot build
        update-chroot
    fi
    update-time "last-chroot"
}

function perm-pull()
{
    push-pull-git-fxn "update" "pull"
}

function perm-push()
{
    push-pull-git-fxn "push" "push"
}

function dmenu-wrapper()
{
    if [ ! -e $DMENU_ENTRIES ]; then
        TMP_DMENU=$DMENU_ENTRIES.tmp
        rm -f $TMP_DMENU
        for item in $(echo $DMENU_LIST); do
            echo $item >> $TMP_DMENU
        done 
        if [ -e $DMENU_INCLUDE ]; then
            cat $DMENU_INCLUDE >> $TMP_DMENU
        fi
        ls $URL_COMMON | grep -v "$INDEX_EXT$" >> $TMP_DMENU
        cat $TMP_DMENU | sort > $DMENU_ENTRIES
        rm -f $TMP_DMENU
    fi
    cat $DMENU_ENTRIES | dmenu "$@" | ${SHELL:-"/bin/sh"} &
}

function searching()
{
    if [ -z "$1" ]; then
        echo "requires a search term"
        exit -1
    fi
    SEARCH=""
    for term in ${@:1}; do
        SEARCH=$SEARCH" $(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$term")"
    done
    firefox "http://www.google.com/search?q=$SEARCH"
}

function passwords()
{
    keepassx2 $PASS_FILE
}

function rebuild-now()
{
    mkdir -p $CACHE_PATH
    rm -f $DMENU_ENTRIES
    rm ${CACHE_PATH}*
    for line in $(print-help | cut -d " " -f 5); do
        if [[ "$line" == "$REBUILD_KEY" ]]; then
            continue
        fi
        file_name=${CACHE_PATH}$line
        echo "#/bin/bash
helper_cache $line \$@" > $file_name
        chmod u+x $file_name
    done
}

function print-help()
{
    res=$(get-help | grep -v -e '^$' | sort)
    echo "
$res
"
}

function get-help()
{
    echo "
    $SEARCH_KEY (search)
    $PASSWORD_KEY (password management)
    $VOLUME_KEY (volume mixer)
    $REBUILD_KEY (rebuild cache)
    $DMENU_KEY (dmenu wrapper)
    $PERM_UPDATE_KEY (update pass databases)
    $PERM_PUSH_KEY (push pass databases)
    $ENTER_KEY (enter keys into a non-paste friendly place)
    $AUTO_CLIP_KEY (copy an entry to the clipboard from private aliases)
    $ARCH_CHROOT_KEY (arch-chroot management)
    $MACHINECTL_NSPAWN_KEY (machinectl wrapper for creating systems)
    $FIREFOX_KEY (firefox)
    $FIREFOX_PRIVATE_KEY (firefox private window)
    $BROWSER_KEY (default browser)
    $BROWSER_PRIVATE_KEY (default browser - private)
    $SUITE_KEY (open a set of website as a suite)
    $BASH_HIST (cleanup bash history)
"
}

function run-terminal()
{
    lxterminal --command "$1"
}

function volume-mixer()
{
    run-terminal "alsamixer"
}

if [ ! -z $1 ]; then
    NEED_HELP=0
    cmd=$(echo "$1" | sed "s/$BROWSER_KEY/$FIREFOX_KEY/g")
    case $cmd in
        $MACHINECTL_NSPAWN_KEY)
            make-nspawn ${@:2}
            ;;
        $PASSWORD_KEY)
            passwords
            ;;
        $SEARCH_KEY)
            searching ${@:2}
            ;;
        $VOLUME_KEY)
            volume-mixer
            ;;
        $REBUILD_KEY)
            rebuild-now
            ;;
        $FIREFOX_KEY | $FIREFOX_PRIVATE_KEY)
            arg=""
            if [[ "$cmd" == "$FIREFOX_PRIVATE_KEY" ]]; then
                arg="--private-window"
            fi
    
            firefox $arg
            ;;
        $ENTER_KEY)
            enter-keys ${@:2}
            ;;
        $DMENU_KEY)
            dmenu-wrapper ${@:2}
            ;;
        $PERM_UPDATE_KEY)
            perm-pull
            ;;
        $PERM_PUSH_KEY)
            perm-push
            ;;
        $AUTO_CLIP_KEY)
            auto-clip
            ;;
        $ARCH_CHROOT_KEY)
            arch-chroot-manage
            ;;
        $SUITE_KEY)
            suite-open
            ;;
        $BASH_HIST)
            cleanup-bash-history
            ;;
        *)
            NEED_HELP=1
            ;;
    esac
    
    if [ $NEED_HELP -eq 0 ]; then
         exit 0
    fi
fi

print-help
