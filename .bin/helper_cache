#!/bin/bash
source $HOME/.bin/common
SEARCH_KEY="search"
PASSWORD_KEY="passwords"
VOLUME_KEY="volume"
REBUILD_KEY="rebuild"
MARKDOWN_KEY="markdown"
PRIVATE_KEY="-private"
GOOGLE_CHROME_KEY="google-chrome"
CHROME_KEY="chrome"
CHROME_PRIVATE_KEY="$CHROME_KEY$PRIVATE_KEY"
BROWSE_KEY="browse"
BROWSE_PRIVATE_KEY="$BROWSE_KEY$PRIVATE_KEY"
INSTALL_CHROME_KEY="setup-chrome"
TEXT_EDITOR_KEY="text-editor"
DMENU_KEY="dmenu-wrapper"
PERM_UPDATE_KEY="perm-pull"
PERM_PUSH_KEY="perm-push"
WORKSPACER_KEY="workspacer"
ENTER_KEY="enterkeys"
AUTO_CLIP_KEY="auto-clip"
ARCH_CHROOT_KEY="archroot"
REMOTE_SYS_KEY="remotes"
IRC_CLIENT_KEY="irc"
MACHINECTL_NSPAWN_KEY="machinectl-nspawn"
GOOGLE_CHROME_PRIVATE_KEY="$GOOGLE_CHROME_KEY$PRIVATE_KEY"
PASS_FILE=${SYNCED_PATH}passwords
CACHE_PATH=$HOME/.cache/helper_cache/
WORKING=/opt/workspace/shared
STORAGE=$USER_TMP/markdown-preview/
VIMRC=$HOME/.vimrc
VIMRC_TXT=$HOME/.vimrc_text
VIMRC_TMP=$USER_TMP/.vimrc_txt
DMENU_LIST="$IRC_CLIENT_KEY $SEARCH_KEY $PASSWORD_KEY $VOLUME_KEY $BROWSE_KEY $BROWSE_PRIVATE_KEY $GOOGLE_CHROME_KEY $GOOGLE_CHROME_PRIVATE_KEY $CHROME_KEY $CHROME_PRIVATE_KEY"
DMENU_INCLUDE="$HOME/.config/menus/dmenu_entries"
ENTRIES=$HOME/.config/window.entries
NET_CURRENT=$USER_TMP/network.cache

function remote-systems()
{
    PUSH=$(mktemp -d)
    echo "working: $PUSH"
    cat $HOME/.vimrc | sed "/call Py/d" > $PUSH/.vimrc
    cat $HOME/.profile_paths > $PUSH/.profile_paths
    cat $HOME/.bashrc | sed '/#end-general/q' > $PUSH/.bashrc
    echo "source $HOME/.profile_paths" >> $PUSH/.bashrc
    echo "pushing"
    files=""
    for f in $(find $PUSH -type f); do
        echo $f
        files=$files" $f"
    done
    echo
    bashrc=/home/enck/.bashrc
    for s in $(cat ${SYNCED_CONF}maintained | grep -E "$1"); do
        echo "pushing to: $s"
        avail=$(test-ssh $s)
        if [ $avail -eq $IS_CONNECTED ]; then
            scp $files $s:~/
            ssh -t $s "mkdir -p $HOME/.bin/"
        else
            echo "is unavailable"
        fi
    done
}

function make-nspawn()
{
    if [ -z "$1" ]; then
        echo "operation required"
        exit
    fi
    if [ -z "$2" ]; then
        echo "target required"
        exit
    fi
    sudo make $1 -f $HOME/.bin/makefile.nspawn TARGET=$2
}

function network-change()
{
    res=1
    net=$(ip addr | grep "inet " | grep -v 127.0.0.1 | sed "s/inet //g;s/^[[:space:]]*//g" | cut -d " " -f 1)
    if [ -e $NET_CURRENT ]; then
        old=$(cat $NET_CURRENT)
        if [[ "$net" == "$old" ]]; then
            res=0
        fi
    fi
    echo $net > $NET_CURRENT
    echo $res
}

function irc-client-start()
{
    changed=$(network-change)
    if [ $changed -ne 0 ]; then
        cat $SERVLIST > $SERVLIST_RUN
        ping -c 1 $BASE_SERVER &> /dev/null
        changed=$?
    fi
    if [ $changed -ne 0 ]; then
        sed -i "s#S=$BASE_SERVER/6060#S=127.0.0.1/6060#g" $SERVLIST_RUN
        for p in $(pidof ssh); do
            ps -up $p | grep -q irc-tunnel
            if [ $? -eq 0 ]; then
                kill -9 $p
            fi
        done
        auth=$(cat $SSH_AUTH_TMP)
        export SSH_AUTH_SOCK=$auth
        ssh irc-tunnel -f -N
    fi
    hexchat
}

function auto-clip()
{
    source $PRIV_CONF
    auto-clipboard $PERM_LOCATION
}

function enter-keys()
{
    if [ -e $ENTRIES ]; then
        source $ENTRIES
    fi


    if [ -z $1 ]; then
        echo "must provide input"
    else
        using=$1
        ran=0
        if [ -e $ENTRIES ]; then
            result=$($ENTRIES $using)
            if [ ! -z "$result" ]; then
                ran=1
                enter-window-vals "Chromium" $result
            fi
        fi
        if [ $ran -eq 0 ]; then
            enter-window-vals "Chromium" $@
        fi
    fi
}

function push-pull-git-fxn()
{
    is_avail=$(test-ssh $BASE_SERVER)
    cpwd=$PWD
    for f_name in $(get-perm-objs); do
        f=$(basename $f_name)
        cd $f_name
        echo "$1: $f"
        if [[ $f == *${PERM_PERSONAL}* ]]; then
            if [ $is_avail -ne $IS_CONNECTED ]; then
                echo "**not available**"
                echo
                continue
            fi
        fi
        git $2
        echo
    done
    cd $cpwd
    date +%Y-%m-%d >> $3
}

function i3-workspacer()
{
    python $HOME/.bin/i3workspacer.py
}

function update-chroot()
{
    echo "updating chroot..."
    arch-nspawn -C /etc/pacman.conf ${CHROOT}/root pacman -Syu
}

function arch-chroot-manage()
{
    if [ -d $CHROOT ]; then
        update-chroot
    fi
    if [ ! -d $CHROOT ]; then
        echo "creating chroot..."
        mkdir -p $CHROOT
        mkarchroot -C /etc/pacman.conf $CHROOT/root base-devel
        update-chroot
    fi
    date +%Y-%m-%d >> $LAST_CHROOT_UPDATE
}

function perm-pull()
{
    push-pull-git-fxn "update" "pull" "$PERM_LAST_PULL"
}

function perm-push()
{
    push-pull-git-fxn "push" "push" "$PERM_LAST_PUSH"
}

function text-editor()
{
    cat $VIMRC | grep -v "OverLength" | grep -v "set number" > $VIMRC_TMP
    cat $VIMRC_TXT >> $VIMRC_TMP
    cmd="vim -Nu $VIMRC_TMP $@"
    $cmd
}

function dmenu-wrapper()
{
    if [ ! -e $DMENU_ENTRIES ]; then
        TMP_DMENU=$DMENU_ENTRIES.tmp
        rm -f $TMP_DMENU
        for item in $(echo $DMENU_LIST); do
            echo $item >> $TMP_DMENU
        done 
        if [ -e $DMENU_INCLUDE ]; then
            cat $DMENU_INCLUDE >> $TMP_DMENU
        fi
        ls $URL_COMMON | grep -v "$INDEX_EXT$" >> $TMP_DMENU
        cat $TMP_DMENU | sort > $DMENU_ENTRIES
        rm -f $TMP_DMENU
    fi
    cat $DMENU_ENTRIES | dmenu "$@" | ${SHELL:-"/bin/sh"} &
}

function markdown()
{
    mkdir -p $STORAGE
    find ${STORAGE}* -type f -mtime +1 -delete &> /dev/null

    ID=$RANDOM
    printf -v ID "%05d" $ID
    NOW=$(date +%s)
    FILE_NAME=${STORAGE}/$NOW-$ID.html
    pandoc -o $FILE_NAME -f markdown $1
    (chromium $FILE_NAME &) &>/dev/null
}

function searching()
{
    if [ -z "$2" ]; then
        echo "requires a search term"
        exit -1
    fi
    SEARCH=""
    for term in ${@:2}; do
        SEARCH=$SEARCH" $(perl -MURI::Escape -e 'print uri_escape($ARGV[0]);' "$term")"
    done
    ARGS="--new-window"
    if [ ! -z $1 ]; then
        ARGS=$1
    fi
    chromium "http://www.google.com/search?q=$SEARCH" $ARGS 
}

function file-required()
{
    if [ ! -z $1 ]; then
        if [ -e $1 ]; then
            return 0
        fi
    fi
    
    echo "file required..."
    exit -1
}

function passwords()
{
    keepassx2 $PASS_FILE
}

function rebuild-now()
{
    mkdir -p $CACHE_PATH
    rm ${CACHE_PATH}*
    for line in $(print-help | cut -d " " -f 5); do
        if [[ "$line" == "$REBUILD_KEY" ]]; then
            continue
        fi
        file_name=${CACHE_PATH}$line
        echo "#/bin/bash
helper_cache $line \$@" > $file_name
        chmod u+x $file_name
    done
}

function print-help()
{
    res=$(get-help | grep -v -e '^$' | sort)
    echo "
$res
"
}

function get-help()
{
    echo "
    $SEARCH_KEY (search)
    $PASSWORD_KEY (password management)
    $VOLUME_KEY (volume mixer)
    $REBUILD_KEY (rebuild cache)
    $MARKDOWN_KEY (markdown output generation)
    $GOOGLE_CHROME_KEY (start google chrome browsing)
    $BROWSE_KEY (start browsing)
    $GOOGLE_CHROME_PRIVATE_KEY (start private google chrome browsing)
    $BROWSE_PRIVATE_KEY (start private browsing)
    $INSTALL_CHROME_KEY (install chrome)
    $TEXT_EDITOR_KEY (text editor/documentation editor)
    $DMENU_KEY (dmenu wrapper)
    $PERM_UPDATE_KEY (update pass databases)
    $PERM_PUSH_KEY (push pass databases)
    $CHROME_KEY (chrome key)
    $CHROME_PRIVATE_KEY (chrome private key)
    $WORKSPACER_KEY (i3 workspace name management)
    $ENTER_KEY (enter keys into a non-paste friendly place)
    $AUTO_CLIP_KEY (copy an entry to the clipboard from private aliases)
    $ARCH_CHROOT_KEY (arch-chroot management)
    $IRC_CLIENT_KEY (irc client)
    $MACHINECTL_NSPAWN_KEY (machinectl wrapper for creating systems)
    $REMOTE_SYS_KEY (push configuration to remote systems)
"
}

function run-terminal()
{
    lxterminal --command "$1"
}

function volume-mixer()
{
    run-terminal "alsamixer"
}

function install-chrome()
{
    date +%Y-%m-%d >> $CHROME_UPDATED
    chromium_version=$(chromium --version | sed "s/Chromium //g")
    google_version=$(google-chrome-stable --version | sed "s/Google Chrome //g")
    echo "Chromium: $chromium_version"
    echo "Google Chrome: $google_version"
    if [[ $chromium_version == $google_version ]]; then
        read -p "same version detected, continue (y/n)? " force
        if [[ $force != "y" ]]; then
            exit -1
        fi 
    fi
    id=$(uuidgen)
    file_name=/tmp/chrome-$id.rpm
    wget -O $file_name https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
    current=$PWD
    cd /tmp
    mkdir -p chrome-install
    rm -rf chrome-install/*
    cd chrome-install
    rpmextract.sh $file_name
    sudo rm -rf /opt/google/chrome/
    sudo mv opt/google/chrome/ /opt/google/
    sudo mv usr/bin/google-chrome-stable /usr/bin/google-chrome-stable
    sudo chown root:root /opt/google/chrome/chrome-sandbox
    sudo chmod 4755 /opt/google/chrome/chrome-sandbox
    cd $current
}

if [ ! -z $1 ]; then
    NEED_HELP=0
    case $1 in
        $MACHINECTL_NSPAWN_KEY)
            make-nspawn ${@:2}
            ;;
        $PASSWORD_KEY)
            passwords
            ;;
        $SEARCH_KEY)
            searching "" ${@:2}
            ;;
        $VOLUME_KEY)
            volume-mixer
            ;;
        $REBUILD_KEY)
            rebuild-now
            ;;
        $FIREFOX_KEY | $FIREFOX_PRIVATE_KEY)
            arg=""
            if [[ "$1" == "$FIREFOX_PRIVATE_KEY" ]]; then
                arg="--private-window"
            fi
    
            firefox $arg
            ;;
        $GOOGLE_CHROME_KEY | $GOOGLE_CHROME_PRIVATE_KEY | $BROWSE_KEY | $BROWSE_PRIVATE_KEY | $CHROME_PRIVATE_KEY | $CHROME_KEY)
            browser="chromium"
            if [[ "$1" == $GOOGLE_CHROME_KEY* ]]; then
                browser="google-chrome-stable"
            fi
            arg=""
            if [[ "$1" == *$PRIVATE_KEY ]]; then
                arg="--incognito"
            fi
            $browser $arg 
            ;;
        $ENTER_KEY)
            enter-keys ${@:2}
            ;;
        $MARKDOWN_KEY)
            file-required $2
            markdown $2
            ;;
        $INSTALL_CHROME_KEY)
            install-chrome
            ;;
        $TEXT_EDITOR_KEY)
            text-editor ${@:2}
            ;;
        $WORKSPACER_KEY)
            i3-workspacer &
            ;;
        $DMENU_KEY)
            dmenu-wrapper ${@:2}
            ;;
        $PERM_UPDATE_KEY)
            perm-pull
            ;;
        $PERM_PUSH_KEY)
            perm-push
            ;;
        $AUTO_CLIP_KEY)
            auto-clip
            ;;
        $ARCH_CHROOT_KEY)
            arch-chroot-manage
            ;;
        $IRC_CLIENT_KEY)
            irc-client-start
            ;;
        $REMOTE_SYS_KEY)
            remote-systems ${@:2}
            ;;
        *)
            NEED_HELP=1
            ;;
    esac
    
    if [ $NEED_HELP -eq 0 ]; then
         exit 0
    fi
fi

print-help
