#!/bin/bash
source $HOME/.bin/common
IS_MOUNTED=1
KEYS_KEYWORD="keys"
UMNT_KEYWORD="umount"
DEFCRYPT_KEYWORD="defcrypt"
REMCRYPT_KEYWORD="remcrypt"
OPENCRYPT_KEYWORD="opencrypt"
NEWMOUNTS="/tmp/crypts/"
SETUP_CRYPT="setup"
DEFCRYPT_SIZE="100M"
function add-keys()
{
    keys=$(find ${SSH_KEY_PATH}**/* -type f | grep -v "deprecated")
    for key in $keys; do
        pub_key=$(echo ${key#${SSH_KEY_PATH}} | cut -d "/" -f 1)
        if [ ! -e "$SSH_SYNC_PATH/pubkeys/$pub_key.pub" ]; then
            echo "missing pub key $pub_key"
        fi
        ssh-add $key
    done
}

function print-help()
{
    echo "
    $KEYS_KEYWORD - load keys
    $UMNT_KEYWORD - umount local share(s)
    $DEFCRYPT_KEYWORD - define a new crypt (optional size)
    $REMCRYPT_KEYWORD - remove a crypt (required path to crypt)
    $OPENCRYPT_KEYWORD - open an encrypted image (required image file)
"
}

function rem-crypt()
{
    if [ -z $2 ]; then
        echo "requires an object to remove/cleanup"
        exit -1
    fi
    umount_item=${2%/}
    IS_MNT=$(is-mounted $umount_item)
    if [ $IS_MNT -ne $IS_MOUNTED ]; then
        echo "not mounted"
        exit -1
    fi

    use_mapper=$3
    if [ -z $use_mapper ]; then
        use_mapper=$(basename $umount_item)
    fi

    close-crypt $umount_item $use_mapper    
}

function crypt-name()
{
    echo $(uuidgen)"-crypt-mapper"
}

function crypt-place()
{
    mkdir -p ${NEWMOUNTS}
    MOUNT_CRYPT="${NEWMOUNTS}$1"
    echo $MOUNT_CRYPT
}

function def-crypt()
{
    size=$2
    MAPPING=$(crypt-name)
    if [ -z $size ]; then
        size=$DEFCRYPT_SIZE
    fi

    check_size=$(echo "$size" | grep "^[0-9][0-9]*" | grep -E "M|G")
    if [ -z "$check_size" ]; then
        echo "invalid size (expecting [0-9]+(M|G): $size"
        exit -1
    fi

    file_name=$PWD/$MAPPING".img"
    DEF_MOUNT=$(crypt-place "$MAPPING")

    echo "
creating file $file_name ($size)
mounting: $DEF_MOUNT
mapper: $MAPPING
"
    read -p "continue (y/n)? " yn
    if [[ $yn == "y" ]]; then
        dd if=/dev/zero of=$file_name bs=1 count=0 seek=$size
        sudo cryptsetup luksFormat $file_name
        open-crypt "" "$file_name" "$MAPPING" "$DEF_MOUNT" "$SETUP_CRYPT"
        df -h $DEF_MOUNT
    fi
}

function crypt-mounting()
{
    if [ -z "$2" ]; then
        echo "requires an image to mount"
        exit -1
    fi

    MAPPING=$(crypt-name)
    DEF_MOUNT=$(crypt-place "$MAPPING")
    echo $MAPPING
    echo $DEF_MOUNT
    open-crypt "" "$2" "$MAPPING" "$DEF_MOUNT" "mounting"
}

function open-crypt()
{
    sudo cryptsetup luksOpen $1 $2 $3
    sudo mkdir -p $4
    if [[ "$5" == "$SETUP_CRYPT" ]]; then
        sudo mkfs.ext4 /dev/mapper/$3
    fi
    sudo mount /dev/mapper/$3 $4
    if [[ "$5" == "$SETUP_CRYPT" ]]; then
        sudo chown -R $USER:$USER $4
        rm -rf $4/lost+found
    fi
}

function close-crypt()
{
    sudo umount $1
    sudo cryptsetup luksClose $2
}

function umount-share()
{
    IS_MNT=$(is-mounted $MNT_SHARE)
    if [ $IS_MNT -eq $IS_MOUNTED ]; then
        sudo umount $MNT_SHARE
    fi    
}

case $1 in
    $UMNT_KEYWORD)
        umount-share
        ;;
    $KEYS_KEYWORD)
        add-keys
        ;;
    $DEFCRYPT_KEYWORD)
        def-crypt $@
        ;;
    $REMCRYPT_KEYWORD)
        rem-crypt $@
        ;;
    $OPENCRYPT_KEYWORD)
        crypt-mounting $@
        ;;
    *)
        print-help
        ;;
esac
