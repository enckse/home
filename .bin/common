#!/bin/bash
# constants
READY="ready"
IS_CONNECTED=1
NOT_CONNECTED=0
RED_TEXT="\033[1;31m"
NORM_TEXT="\033[0m"
BASE_SERVER="base"
REQUIRED_EVENTS=6
GIT_PARTIAL_PATTERN="weechat|random_seed"

# standalone files/dirs
PERM_LOCATION=/opt/perm/
PERM_PERSONAL=personal
SSH_AUTH_TMP=/tmp/ssh-auth.sock

# home
USER_TMP=$HOME/.tmp
SYNCED_PATH=$HOME/.synced/
HOME_CONF=$HOME/.config/
HOME_CACHE=$HOME/.cache/

# cache
LAST_TIMES=${HOME_CACHE}last-timed.log

# perm
CHROOT_LOCATION=${PERM_LOCATION}chroot

# syncing
SYNCED_CONF=${SYNCED_PATH}/configs/
PASS_FILE=${SYNCED_PATH}passwords
PRIV_CONF=${SYNCED_CONF}priv.aliases

# user temp
PROFILE_DEF=$USER_TMP/profile.next
DISPLAY_UN=$USER_TMP/display-unlocked
DISPLAY_EN=$USER_TMP/display-enabled
GIT_PARTIAL_TMP=$USER_TMP/git-partial
LAST_TIMES_TMP=$USER_TMP/.last_time.tmp
PKG_QUERY=$USER_TMP/package.query
GIT_CHANGES=$USER_TMP/git.changes
SND_MUTE=$USER_TMP/.mute
PROFILE_TMP=$USER_TMP/.profile.synced.

function mute()
{
    pamixer -m
}

function update-time()
{
    d=$(date +%Y-%m-%d)
    update-time-log "$1" $d
}

function update-time-log()
{
    cat $LAST_TIMES | grep -v "$1," > $LAST_TIMES_TMP
    cat $LAST_TIMES_TMP > $LAST_TIMES
    echo "$1,$2" >> $LAST_TIMES
}

function enter-window-vals()
{
    word=$2
    window=0
    while [ $window -eq 0 ]; do
        echo "please activate the $1 window to enter the text into"
        sleep 3
        active=$(xdotool getactivewindow)
        xdotool search --class $1 | grep -q $active
        if [ $? -eq 0 ]; then
            window=1
        else
            echo "please select a $1 window"
        fi
    done
    xdotool type "$word"
    for i in ${@:3}; do
        xdotool key $i
    done
}

function test-ssh()
{
    running=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $1 echo $READY 2>&1)
    if [[ "$running" == "$READY" ]]; then
        echo $IS_CONNECTED
    else
        echo $NOT_CONNECTED
    fi
}

function get-all-changes()
{
    git update-index -q --refresh 
    git diff-index --name-only HEAD --
    git status -sb | grep 'ahead'
    git branch | grep "^\*" | grep -v "master"
}

function get-git-folders()
{
    res=""
    for f in $(find $1 -type d | sort); do
        if [ ! -d "$f/.git" ]; then
            continue
        fi
        res=$res" "$f
    done
    echo $res
}

function get-workspace-objs()
{
    get-git-folders "$HOME/workspace/"
}

function get-perm-objs()
{
    get-git-folders "${PERM_LOCATION} -maxdepth 2"
}

function git-changing()
{
    d_paths="/etc $HOME $SYNCED_PATH "$(get-perm-objs)" "$(get-workspace-objs)
    for d in $(echo "$d_paths"); do
        if [ ! -d "$d/.git" ]; then
            continue
        fi
        cd $d
        local_res=$(get-all-changes "$d")
        if [ -e "$GIT_PARTIAL_TMP" ]; then
            local_res=$(echo "$local_res" | grep -E -v "$GIT_PARTIAL_PATTERN")
        fi
        if [ ! -z "$local_res" ]; then
            if [ -z $first ]; then
                echo "uncommitted changes"
            fi
            echo -e "$d${RED_TEXT}"
            echo -e "$local_res${NORM_TEXT}" | sed "s/^/    /g"
            first="false"
        fi
    done
    touch $GIT_PARTIAL_TMP
    cd $HOME
}

function github-commit()
{
    local _hash
    _hash=$(git ls-remote --$1 $2 | tail -n 1)
    if [ ! -z "$_hash" ]; then
        commit=$(echo "$_hash" | cut -d " " -f 1 | cut -d "/" -f 1 | sed "s#refs##g")
        echo $commit
    fi
}

function github-releases()
{
    local last
    last=$(date -d "1 month ago" +%Y-%m-%d)
    for u in $(echo "enckse epiphyte"); do
        _file=$USER_TMP/repos.$u
        curl -s "https://api.github.com/search/repositories?q=user:$u+pushed:%3E=$last&sort=updated" | grep "clone_url" | cut -d ":" -f 2,3 | sed 's/"//g;s/ //g;s/,//g' > $_file
        for r in $(cat $_file | sort | grep -v -E "https://github.com/(enckse|epiphyte)/(home|batchy).git"); do
            tag=$(github-commit "tags" $r)
            if [ ! -z "$tag" ]; then
                head=$(github-commit "head" $r)
                if [[ "$head" != "$tag" ]]; then
                    echo "$r" | sed "s/\.git$/\/releases/g"
                fi
            fi
        done
    done
    update-time "github-releases"
}
