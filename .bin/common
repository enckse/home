#!/bin/bash
USER_TMP=$HOME/.tmp
BASH_HISTORY=$HOME/.bash_history
SYNCED_PATH="$HOME/.synced/"
SYNCED_CONF=${SYNCED_PATH}/configs/
PASS_ALIASES=${USER_TMP}/pass.aliases
PERM_LOCATION=/opt/perm/
CHROOT_LOCATION=${PERM_LOCATION}chroot
PASS_PREFIX="pass-"
SSH_SYNC_PATH=${SYNCED_PATH}ssh/
SSH_KEY_PATH=${SSH_SYNC_PATH}private/
PROFILE_DEF="${USER_TMP}/profile.next"
READY="ready"
IS_CONNECTED=1
NOT_CONNECTED=0
DISPLAY_UN=/tmp/display-unlocked
DISPLAY_EN=/tmp/display-enabled
WORKPLACE_WORKING=/tmp/working
URL_COMMON=$HOME/.cache/dmenu_urls
INDEX_EXT=".index"
DMENU_ENTRIES="$USER_TMP/dmenu_cache"
STATUS_LOCKING_KEY="locking"
STATUS_BACKLIGHT_KEY="backlight"
IS_MOUNTED=1
RED_TEXT="\033[1;31m"
NORM_TEXT="\033[0m"
SSH_AUTH_TMP=/tmp/ssh-auth.sock
PACMAN_LOG=/var/log/pacman.log
EPIPHYTE_CONF=$HOME/.config/epiphyte/env
PERM_PERSONAL=personal
PRIV_CONF=${SYNCED_CONF}priv.aliases
GIT_PARTIAL_PATTERN="weechat|random_seed"
GIT_PARTIAL_TMP=$USER_TMP/git-partial
BASE_SERVER="base"
COPY_INDICATOR=$USER_TMP/backup.files
MNT_SHARE=/mnt/Storage
LAST_TIMES=$HOME/.cache/last-timed.log
LAST_TIMES_TMP=$USER_TMP/.last_time.tmp
REQUIRED_EVENTS=6
DOCK_SLEEP=$USER_TMP/dock.check
TRAY_SET=/tmp/.tray
PKG_QUERY=$USER_TMP/package.query
CONF_HOME=$HOME/.config/home

function list-packages()
{
    /usr/bin/pacman -Qqe > ${CONF_HOME}/packages
}

function tray()
{
    i3_commands tray_icons > /dev/null 2>&1 &
}

function docked()
{
    if [ ! -e $DOCK_SLEEP ]; then
        local _isdock _isconnected _profile
        lsusb | grep -q "Lenovo"
        _isdock=$?
        wget -q --tries=10 --timeout=20 --spider https://google.com
        _isconnected=$?
        if [ $_isconnected -ne 0 ]; then
            _profile=3
            if [ $_isdock -eq 0 ]; then
                _profile=2
            fi
            wsw --change $_profile
        fi
        touch $DOCK_SLEEP
    fi
}

function set-system()
{
    # disable touchpad
    xinput set-prop $(xinput | grep "SynPS/2" | sed -n -e 's/^.*id=//p' | sed -e "s/\s/ /g" | cut -d " " -f 1) "Device Enabled" 0

    # mute
    _SND_MUTE="/tmp/.mute"
    if [ ! -e $_SND_MUTE ]; then
        _snd=$(subsystem volume sound status | sed "s/ //g")
        if [ $_snd -ne 0 ]; then
            subsystem volume sound mute
        fi
        touch $_SND_MUTE
    fi

    # user services
    systemctl --user start i3workspacer.service
}

function update-time()
{
    d=$(date +%Y-%m-%d)
    update-time-log "$1" $d
}

function update-time-log()
{
    cat $LAST_TIMES | grep -v "$1," > $LAST_TIMES_TMP
    cat $LAST_TIMES_TMP > $LAST_TIMES
    echo "$1,$2" >> $LAST_TIMES
}

function process-logs()
{
    d=$(cat $PACMAN_LOG | grep $(date +%Y) | cut -d " " -f 1 | cut -d "[" -f 2 | sort | uniq | tail -n 1)
    update-time-log "pacman" $d
}

function enter-window-vals()
{
    word=$2
    window=0
    while [ $window -eq 0 ]; do
        echo "please activate the $1 window to enter the text into"
        sleep 3
        active=$(xdotool getactivewindow)
        xdotool search --class $1 | grep -q $active
        if [ $? -eq 0 ]; then
            window=1
        else
            echo "please select a $1 window"
        fi
    done
    xdotool type "$word"
    for i in ${@:3}; do
        xdotool key $i
    done
}

function check-timed-events()
{
    all=""
    today=$(date +%Y-%m-%d)
    all="$today"
    for d in $(seq 1 7); do
        past=$(date +%Y-%m-%d -d "-$d days")
        all=$all"|$past"
    done
    year=$(date +%Y)
    months="($year-"$(date +%m)"|"$year-$(date -d "last month" +%m)")"
    all="($all)"
    if [ ! -e "$LAST_TIMES" ]; then
        touch $LAST_TIMES
    else
        warnings=""
        cnt=0
        for item in $(cat $LAST_TIMES); do
            cnt=$((cnt+1))
            i=$(echo $item | cut -d "," -f 1)
            d=$(echo $item | cut -d "," -f 2)
            echo $d | grep -q -E "$all"
            if [ $? -ne 0 ]; then
                _warn=1
                if [[ $i == "$PKGBUILD_IND"* ]]; then
                    if [[ $i == *"-git" ]]; then
                        echo $d | grep -q -E "$months"
                        if [ $? -eq 0 ]; then
                            _warn=0
                        fi
                    fi
                fi
                if [ $_warn -eq 1 ]; then
                    warnings="$warnings ${i}_(${d})"
                fi
            fi
        done
        if [ $cnt -ne $REQUIRED_EVENTS ]; then
            warnings=$warnings" wrong_number_of_events"
        fi
        if [ ! -z "$warnings" ]; then
            echo -e "${RED_TEXT}"
            echo "system events"
            echo "==="
            for w in $(echo $warnings); do
                changed=$(echo $w |  sed "s/_/ /g")
                echo -e "  -> (maintanence) $changed"
            done
            echo -e "${NORM_TEXT}"
            process-logs
        fi
    fi
}

function test-ssh()
{
    running=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $1 echo $READY 2>&1)
    if [[ "$running" == "$READY" ]]; then
        echo $IS_CONNECTED
    else
        echo $NOT_CONNECTED
    fi
}

function process-pass-aliases()
{
    if [ ! -e $PASS_ALIASES ]; then
        echo "source /usr/share/bash-completion/completions/pass" > $PASS_ALIASES
        idx=0
        for f in $(ls ${PERM_LOCATION} | grep "$PASS_PREFIX"); do
            f_path=${PERM_LOCATION}$f
            name="p$idx"
            echo alias $f=\"PASSWORD_STORE_DIR=$f_path pass\" >> $PASS_ALIASES
            echo "_$name(){" >> $PASS_ALIASES
            echo "    PASSWORD_STORE_DIR=$f_path/ _pass" >> $PASS_ALIASES
            echo "}" >> $PASS_ALIASES
            echo >> $PASS_ALIASES
            echo "complete -o filenames -o nospace -F _$name $f" >> $PASS_ALIASES
            idx=$((idx+1))
        done
        if [ -e $EPIPHYTE_CONF ]; then
            source $EPIPHYTE_CONF
            for l in $(echo $LUKS_ALIASES); do
                echo "alias luks-$l=\"enterkeys luks-$l\"" >> $PASS_ALIASES
            done
        fi
    fi
    source $PASS_ALIASES
}

function is-mounted()
{
    mount | grep -q $1
    if [ $? -eq 0 ]; then
        echo $IS_MOUNTED
    else
        echo 0
    fi
}

function get-all-changes()
{
    git update-index -q --refresh 
    git diff-index --name-only HEAD --
    git status -sb | grep 'ahead'
    git branch | grep "^\*" | grep -v "master"
}

function set-user-files()
{
    # user tmp
    mkdir -p $USER_TMP
    find $USER_TMP* -mtime +1 -type f -exec rm {} \;
    find $USER_TMP -empty -type d -delete

    if [ ! -e "$COPY_INDICATOR" ]; then
        cp /etc/hosts ${SYNCED_CONF}hosts
        cp /etc/systemd/network/* $HOME/.config/networkd/
        touch $COPY_INDICATOR
    fi

    # vim
    for v in $(echo "undo swap"); do
        vim_dir=$HOME/.vim/$v
        mkdir -p $vim_dir
        find $vim_dir -mmin +1440 -type f -exec rm {} \;
    done
}

function get-git-folders()
{
    res=""
    for f in $(find $1 -type d | sort); do
        if [ ! -d "$f/.git" ]; then
            continue
        fi
        res=$res" "$f
    done
    echo $res
}

function get-workspace-objs()
{
    get-git-folders "$HOME/workspace/"
}

function get-perm-objs()
{
    get-git-folders "${PERM_LOCATION} -maxdepth 2"
}

function git-changes()
{
    d_paths="$HOME $SYNCED_PATH "$(get-perm-objs)" "$(get-workspace-objs)
    for d in $(echo "$d_paths"); do
        if [ ! -d "$d/.git" ]; then
            continue
        fi
        cd $d
        local_res=$(get-all-changes "$d")
        if [ -e "$GIT_PARTIAL_TMP" ]; then
            local_res=$(echo "$local_res" | grep -E -v "$GIT_PARTIAL_PATTERN")
        fi
        if [ ! -z "$local_res" ]; then
            if [ -z $first ]; then
                echo "uncommitted changes"
            fi
            echo -e "$d$RED_TEXT"
            echo -e "$local_res$NORM_TEXT" | sed "s/^/    /g"
            first="false"
        fi
    done
    touch $GIT_PARTIAL_TMP
    cd $HOME
}
