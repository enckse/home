#!/bin/bash
# constants
READY="ready"
IS_CONNECTED=1
NOT_CONNECTED=0
RED_TEXT="\033[1;31m"
NORM_TEXT="\033[0m"
BASE_SERVER="blip"
GIT_PARTIAL_PATTERN="weechat|random_seed"

# standalone files/dirs
PERM_LOCATION=$HOME/store/
PERM_PERSONAL=personal
SSH_AUTH_TMP=/tmp/ssh-auth.sock

# home
USER_TMP=$HOME/.tmp
SYNCED_PATH=$HOME/.synced/
HOME_CONF=$HOME/.config/
HOME_CACHE=$HOME/.cache/

# perm
CHROOT_LOCATION=${PERM_LOCATION}chroot
PASS_TOTP_OFFSET="totp/"

# syncing
SYNCED_CONF=${SYNCED_PATH}/configs/
PRIV_CONF=${SYNCED_CONF}priv.aliases

# user temp
PROFILE_DEF=$USER_TMP/profile.next
DISPLAY_UN=$USER_TMP/display-unlocked
DISPLAY_EN=$USER_TMP/display-enabled
GIT_PARTIAL_TMP=$USER_TMP/git-partial
GIT_CHANGES=$USER_TMP/git.changes
SND_MUTE=$USER_TMP/.mute
PROFILE_TMP=$USER_TMP/.profile.synced.
MAIN_STATS=$USER_TMP/stats
USER_JOURNAL=$USER_TMP/journal.log

# checks
CHECK_STATUS=$USER_TMP/stat.
PERM_PUSH=${CHECK_STATUS}pushed
PERM_PULL=${CHECK_STATUS}pulled
USER_SYNC=${CHECK_STATUS}synced

# sbh
SBH_LOCK=$USER_TMP/.sbhlock
SBH_STORE=${HOME_CACHE}sbh/

function mute()
{
    pamixer -m
}

function enter-window-vals()
{
    local word window active
    word=$2
    window=0
    while [ $window -eq 0 ]; do
        echo "please activate the $1 window to enter the text into"
        sleep 3
        active=$(xdotool getactivewindow)
        xdotool search --class $1 | grep -q $active
        if [ $? -eq 0 ]; then
            window=1
        else
            echo "please select a $1 window"
        fi
    done
    xdotool type "$word"
    for i in ${@:3}; do
        xdotool key $i
    done
}

function test-ssh()
{
    local running
    running=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $1 echo $READY 2>&1)
    if [[ "$running" == "$READY" ]]; then
        echo $IS_CONNECTED
    else
        echo $NOT_CONNECTED
    fi
}

function _get-git-folders()
{
    local res f
    res=""
    for f in $(find $1 -type d | sort); do
        if [ ! -d "$f/.git" ]; then
            continue
        fi
        res=$res" "$f
    done
    echo $res
}

function _get-workspace-objs()
{
    _get-git-folders "$HOME/workspace/"
}

function _get-perm-objs()
{
    _get-git-folders "${PERM_LOCATION} -maxdepth 2"
}

function update-stat()
{
    touch $1.$(date +%Y-%m-%d)
}

function _totp()
{
    local val
    val=$(PASSWORD_STORE_DIR=${PERM_LOCATION}$1 pass show "$PASS_TOTP_OFFSET"$2 2>&1)
    oathtool --base32 --totp "$val"
}

function _formattotp()
{
    echo "$@" | tr ' ' '\n' | sed "s/->/\n    /g;s/;/\n/g"
}

function _totpall()
{
    local data first d left
    data=()
    first=1
    while [ 1 -eq 1 ]; do
        count=0
        left=0
        left=$(date +%S)
        left=$((60-left))
        d=$(date +%Y-%m-%dT%H:%M:%S)
        d="$d, expires: $left (seconds)"
        if [ $first -eq 1 ]; then
            clear
            echo "$d"
        fi
        for p in $(PASSWORD_STORE_DIR=${PERM_LOCATION}$1 pass ls $PASS_TOTP_OFFSET | cut -d " " -f 2 | tail -n +2 ); do
            data[$count]="$p->$(_totp $1 $p);"
            if [ $first -eq 1 ]; then
                _formattotp "${data[$count]}"
            fi
            count=$((count+1))
        done 
        first=0
        clear
        echo "$d"
        _formattotp "${data[*]}"
    done
}

function _enter-linode-config()
{
    enter-window-vals "termite" "configfile (hd0,1)/grub/grub.cfg" "Return"
}

function enterkeys()
{
    BROWSER_WINDOW="Developer"
    if [ -z $1 ]; then
        echo "must provide input"
    else
        using=$1
        ran=0
        if [ -e $PRIV_CONF ]; then
            result=$($PRIV_CONF $using)
            if [ ! -z "$result" ]; then
                ran=1
                enter-window-vals $BROWSER_WINDOW $result
            fi
        fi
        if [ $ran -eq 0 ]; then
            enter-window-vals $BROWSER_WINDOW $@
        fi
    fi
}

function _push-pull-git-fxn()
{
    is_avail=$(test-ssh $BASE_SERVER)
    cpwd=$PWD
    for f_name in $(_get-perm-objs); do
        f=$(basename $f_name)
        cd $f_name
        echo "$1: $f"
        if [[ $f == *${PERM_PERSONAL}* ]]; then
            if [ $is_avail -ne $IS_CONNECTED ]; then
                echo "**not available**"
                echo
                continue
            fi
        fi
        git $2
        echo
    done
    cd $cpwd
}

function perm-pull()
{
    _push-pull-git-fxn "update" "pull"
    update-stat $PERM_PULL
}

function perm-push()
{
    _push-pull-git-fxn "push" "push"
    update-stat $PERM_PUSH
}

function _github-commit()
{
    local _hash
    _hash=$(git ls-remote --$1 $2 | tail -n 1)
    if [ ! -z "$_hash" ]; then
        commit=$(echo "$_hash" | cut -d " " -f 1 | cut -d "/" -f 1 | sed "s#refs##g")
        echo $commit
    fi
}

function github-releases()
{
    local last
    last=$(date -d "1 month ago" +%Y-%m-%d)
    for u in $(echo "enckse epiphyte"); do
        _file=$USER_TMP/repos.$u
        curl -s "https://api.github.com/search/repositories?q=user:$u+pushed:%3E=$last&sort=updated" | grep "clone_url" | cut -d ":" -f 2,3 | sed 's/"//g;s/ //g;s/,//g' > $_file
        for r in $(cat $_file | sort | grep -v -E "https://github.com/(enckse|epiphyte)/(home|batchy).git"); do
            tag=$(_github-commit "tags" $r)
            if [ ! -z "$tag" ]; then
                head=$(_github-commit "head" $r)
                if [[ "$head" != "$tag" ]]; then
                    echo "$r" | sed "s/\.git$/\/releases/g"
                fi
            fi
        done
    done
}
