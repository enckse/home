#!/bin/bash
USER_TMP=$HOME/.tmp
BASH_HISTORY=$HOME/.bash_history
BASH_NEW_HIST=${USER_TMP}/bash_history
SYNCED_PATH="$HOME/.synced/"
SYNCED_CONF=${SYNCED_PATH}/configs/
PASS_ALIASES=${USER_TMP}/pass.aliases
PERM_LOCATION=/opt/perm/
CHROOT_LOCATION=${PERM_LOCATION}chroot
PASS_PREFIX="pass-"
SSH_SYNC_PATH=${SYNCED_PATH}ssh/
SSH_KEY_PATH=${SSH_SYNC_PATH}private/
PROFILE_DEF="${USER_TMP}/profile.next"
READY="ready"
IS_CONNECTED=1
NOT_CONNECTED=0
DISPLAY_UN=/tmp/display-unlocked
DISPLAY_EN=/tmp/display-enabled
WORKPLACE_WORKING=/tmp/working
LAST_TMP_HIT=$USER_TMP/last.tmp
URL_COMMON=$HOME/.cache/dmenu_urls
INDEX_EXT=".index"
DMENU_ENTRIES="$USER_TMP/dmenu_cache"
STATUS_LOCKING_KEY="locking"
STATUS_BACKLIGHT_KEY="backlight"
IS_MOUNTED=1
RED_TEXT="\033[1;31m"
NORM_TEXT="\033[0m"
SSH_AUTH_TMP=/tmp/ssh-auth.sock
VAR_LOG=/var/log/$USER/
USER_LAST_SYNC=${VAR_LOG}synced.log
PERM_LAST_PUSH=${VAR_LOG}perm-push.log
PERM_LAST_PULL=${VAR_LOG}perm-pull.log
LAST_CHROOT_UPDATE=${VAR_LOG}last-chroot.log
PACMAN_LOG=/var/log/pacman.log
EPIPHYTE_CONF=$HOME/.config/epiphyte/env
PERM_PERSONAL=personal
PRIV_CONF=${SYNCED_CONF}priv.aliases
GIT_PARTIAL_PATTERN="weechat|random_seed"
GIT_PARTIAL_TMP=$USER_TMP/git-partial
BASE_SERVER="base"
COPY_INDICATOR=$USER_TMP/backup.files
MNT_SHARE=/mnt/Storage

function update-time()
{
    d=$(date +%Y-%m-%d)
    c=$1
}

function enter-window-vals()
{
    word=$2
    window=0
    while [ $window -eq 0 ]; do
        echo "please activate the $1 window to enter the text into"
        sleep 3
        active=$(xdotool getactivewindow)
        xdotool search --class $1 | grep -q $active
        if [ $? -eq 0 ]; then
            window=1
        else
            echo "please select a $1 window"
        fi
    done
    xdotool type "$word"
    for i in ${@:3}; do
        xdotool key $i
    done
}

function check-timed()
{
    if [ ! -d $VAR_LOG ]; then
        echo "creating $VAR_LOG"
        sudo mkdir $VAR_LOG
        sudo chown $USER:$USER $VAR_LOG
    fi
    if [[ $1 == ${VAR_LOG}* ]]; then
        touch $1
    fi
    cat $1 | grep -q -E $2
    if [ $? -ne 0 ]; then
        echo -e "${RED_TEXT} (maintenance) -> $3 update?${NORM_TEXT}"
    fi
}

function check-timed-events()
{
    all=""
    today=$(date +%Y-%m-%d)
    all="$today"
    for d in $(seq 1 7); do
        past=$(date +%Y-%m-%d -d "-$d days")
        all=$all"|$past"
    done
    all="($all)"
    check-timed $PACMAN_LOG $all "pacman"
    check-timed $USER_LAST_SYNC $all "sync"
    check-timed $PERM_LAST_PUSH $all "permanent-push"
    check-timed $PERM_LAST_PULL $all "permanent-pull"
    check-timed $LAST_CHROOT_UPDATE $all "chroot-status"
}

function test-ssh()
{
    running=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $1 echo $READY 2>&1)
    if [[ "$running" == "$READY" ]]; then
        echo $IS_CONNECTED
    else
        echo $NOT_CONNECTED
    fi
}

function process-pass-aliases()
{
    if [ ! -e $PASS_ALIASES ]; then
        echo "source /usr/share/bash-completion/completions/pass" > $PASS_ALIASES
        idx=0
        for f in $(ls ${PERM_LOCATION} | grep "$PASS_PREFIX"); do
            f_path=${PERM_LOCATION}$f
            name="p$idx"
            echo alias $f=\"PASSWORD_STORE_DIR=$f_path pass\" >> $PASS_ALIASES
            echo "_$name(){" >> $PASS_ALIASES
            echo "    PASSWORD_STORE_DIR=$f_path/ _pass" >> $PASS_ALIASES
            echo "}" >> $PASS_ALIASES
            echo >> $PASS_ALIASES
            echo "complete -o filenames -o nospace -F _$name $f" >> $PASS_ALIASES
            idx=$((idx+1))
        done
        if [ -e $EPIPHYTE_CONF ]; then
            source $EPIPHYTE_CONF
            for l in $(echo $LUKS_ALIASES); do
                echo "alias luks-$l=\"enterkeys luks-$l\"" >> $PASS_ALIASES
            done
        fi
    fi
    source $PASS_ALIASES
}

function is-mounted()
{
    mount | grep -q $1
    if [ $? -eq 0 ]; then
        echo $IS_MOUNTED
    else
        echo 0
    fi
}

function get-all-changes()
{
    git diff-index --name-only HEAD --
    git status -sb | grep 'ahead'
    git branch | grep "^\*" | grep -v "master"
}

function get-git-folders()
{
    res=""
    for f in $(find $1 -type d | sort); do
        if [ ! -d "$f/.git" ]; then
            continue
        fi
        res=$res" "$f
    done
    echo $res
}

function get-workspace-objs()
{
    get-git-folders "$HOME/workspace/"
}

function get-perm-objs()
{
    get-git-folders "${PERM_LOCATION} -maxdepth 2"
}

function git-changes()
{
    d_paths="$HOME $SYNCED_PATH "$(get-perm-objs)" "$(get-workspace-objs)
    for d in $(echo "$d_paths"); do
        if [ ! -d "$d/.git" ]; then
            continue
        fi
        cd $d
        local_res=$(get-all-changes "$d")
        if [ -e "$GIT_PARTIAL_TMP" ]; then
            local_res=$(echo "$local_res" | grep -E -v "$GIT_PARTIAL_PATTERN")
        fi
        if [ ! -z "$local_res" ]; then
            if [ -z $first ]; then
                echo "uncommitted changes"
            fi
            echo -e "$d$RED_TEXT"
            echo -e "$local_res$NORM_TEXT" | sed "s/^/    /g"
            first="false"
        fi
    done
    touch $GIT_PARTIAL_TMP
    cd $HOME
}

function socks-command()
{
    if [ -z "$1" ]; then
        echo "requires port"
        exit -1
    fi
    if [ -z "$2" ]; then
        echo "requires destination"
        exit -1
    fi
    echo "ssh -f -N -D $1 $2 -4"
}

function call-status()
{
    signal-status $1 > /dev/null
}

function signal-status()
{
    for p in $(pidof python); do
        ps $p | grep "genericon"
        if [ $? -eq 0 ]; then
            kill -SIGUSR1 $p 
        fi
    done
}
