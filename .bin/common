#!/bin/bash
# constants
RED_TEXT="\033[1;31m"
NORM_TEXT="\033[0m"
BASE_SERVER="blip"
GIT_PARTIAL_PATTERN="weechat|random_seed"

# standalone files/dirs
PERM_LOCATION=$HOME/store/
PERM_PERSONAL=personal
SSH_AUTH_TMP=/tmp/ssh-auth.sock

# home
USER_TMP=$HOME/.tmp
SYNCED_PATH=$HOME/.synced/
HOME_CONF=$HOME/.config/
HOME_CACHE=$HOME/.cache/
HOME_PERSONAL=${HOME_CONF}personal/
HOME_REPO=${HOME_CACHE}repo/

# perm
CHROOT_LOCATION=${PERM_LOCATION}chroot
PASS_TOTP_OFFSET="totp/"

# syncing
PRIV_CONF=${HOME_PERSONAL}priv.aliases

# user temp
PROFILE_DEF=$USER_TMP/profile.next
GIT_PARTIAL_TMP=$USER_TMP/git-partial
GIT_CHANGES=$USER_TMP/git.changes
SND_MUTE=$USER_TMP/.mute
PROFILE_TMP=$USER_TMP/.profile.synced.
MAIN_STATS=$USER_TMP/stats
USER_JOURNAL=$USER_TMP/journal.log

# sbh
SBH_LOCK=$USER_TMP/.sbhlock
SBH_STORE=${HOME_CACHE}sbh/
SBH_LAST=${USER_TMP}/.sbhlast

# exports
export OPENSC_CONF="$HOME/.config/opensc.conf"

# blacklist of apps to stop in bash
BASH_BLACKLIST="$USER_TMP/.bash_blacklist"
BASH_BLACKLIST_APPS="nano vi"

function mute() {
    pamixer -m
}

function enter-window-vals() {
    local word window active i
    word=$2
    window=0
    while [ $window -eq 0 ]; do
        echo "please activate the $1 window to enter the text into"
        sleep 3
        active=$(xdotool getactivewindow)
        xdotool search --class $1 | grep -q $active
        if [ $? -eq 0 ]; then
            window=1
        else
            echo "please select a $1 window"
        fi
    done
    xdotool type "$word"
    for i in ${@:3}; do
        xdotool key $i
    done
}

function _get-git-folders() {
    local res f
    res=""
    for f in $(find $1 -type d | sort); do
        if [ ! -d "$f/.git" ]; then
            continue
        fi
        res=$res" "$f
    done
    echo $res
}

function _get-workspace-objs() {
    _get-git-folders "$HOME/workspace/"
}

function _get-perm-objs() {
    _get-git-folders "${PERM_LOCATION} -maxdepth 2"
}

function _formattotp() {
    echo "$@" | tr ' ' '\n' | sed "s/->/\n    /g;s/;/\n/g"
}

function _totpall() {
    local data first d left val p filter has
    clear
    data=()
    first=1
    filter=$2
    if [ -z "$filter" ]; then
        filter=""
    fi
    has=0
    while [ 1 -eq 1 ]; do
        count=0
        left=0
        left=$(date +%S | sed "s/^0//g")
        left=$((60-left))
        if [ $left -lt 10 ]; then
            echo -e "${RED_TEXT}"
        fi
        d=$(date +%Y-%m-%dT%H:%M:%S)
        d="$d, expires: $left (seconds)"
        if [ $first -eq 1 ]; then
            clear
            echo "$d"
        fi
        for p in $(PASSWORD_STORE_DIR=${PERM_LOCATION}$1 pass ls $PASS_TOTP_OFFSET | cut -d " " -f 2 | tail -n +2 ); do
            if [ ! -z "$filter" ]; then
                echo "$p" | grep -q "$filter"
                if [ $? -ne 0 ]; then
                    continue
                fi
            fi
            val=$(PASSWORD_STORE_DIR=${PERM_LOCATION}$1 pass show "$PASS_TOTP_OFFSET"$p 2>&1)
            val=$(oathtool --base32 --totp "$val")
            data[$count]="$p->$val;"
            if [ $first -eq 1 ]; then
                _formattotp "${data[$count]}"
            fi
            count=$((count+1))
            has=1
        done
        first=0
        clear
        echo "$d"
        _formattotp "${data[*]}"
        echo -e "${NORM_TEXT}"
        if [ $has -eq 0 ]; then
            echo "no totp tokens match"
            break
        fi
    done
}

function _enter-linode-config() {
    enter-window-vals "termite" "configfile (hd0,1)/grub/grub.cfg" "Return"
}

function _enterbrowserkeys() {
    enter-window-vals "Developer" "$@" "Return"
}

function enterkeys() {
    local using ran result
    if [ -z $1 ]; then
        echo "must provide input"
    else
        using=$1
        ran=0
        if [ -e $PRIV_CONF ]; then
            result=$($PRIV_CONF $using)
            if [ ! -z "$result" ]; then
                ran=1
                _enterbrowserkeys "$result"
            fi
        fi
        if [ $ran -eq 0 ]; then
            _enterbrowserkeys "$@"
        fi
    fi
}

function _github-commit() {
    local _hash commit
    _hash=$(git ls-remote --$1 $2 | tail -n 1)
    if [ ! -z "$_hash" ]; then
        commit=$(echo "$_hash" | cut -d " " -f 1 | cut -d "/" -f 1 | sed "s#refs##g")
        echo $commit
    fi
}

function github-releases() {
    local last u _file r tag head
    last=$(date -d "1 month ago" +%Y-%m-%d)
    for u in $(echo "enckse epiphyte"); do
        _file=$USER_TMP/repos.$u
        curl -s "https://api.github.com/search/repositories?q=user:$u+pushed:%3E=$last&sort=updated" | grep "clone_url" | cut -d ":" -f 2,3 | sed 's/"//g;s/ //g;s/,//g' > $_file
        for r in $(cat $_file | sort | grep -v -E "https://github.com/(enckse|epiphyte)/home.git"); do
            tag=$(_github-commit "tags" $r)
            if [ ! -z "$tag" ]; then
                head=$(_github-commit "head" $r)
                if [[ "$head" != "$tag" ]]; then
                    echo "$r" | sed "s/\.git$/\/releases/g"
                fi
            fi
        done
    done
}
