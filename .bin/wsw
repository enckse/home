#!/bin/bash
NETWORKS=/etc/wsw/
VAR_CACHE=/var/cache/wsw/
NETWORK_CACHE=${VAR_CACHE}network
NETWORK_KILL=${VAR_CACHE}mon.pid
RELOAD_KEY="reload"
CONF=".conf"
CURRENT_KEY="current"

_iplink() {
    ip link set $1 $2
    echo "setting $1 -> $2"
}

_get-nets() {
    find $NETWORKS -type f -name "*$CONF" | sed "s#$NETWORKS##g" | sed "s/$CONF//g" | tr '\n' ' '
}

_connect() {
    local conf device flags obj check hashed current
    check=0
    current=$(sha256sum $NETWORK_CACHE | cut -d " " -f 1)
    for f in $(_get-nets); do
        hashed=$(echo "$f" | sha256sum | cut -d " " -f 1)
        if [[ "$hashed" == "$current" ]]; then
            check=1
            break
        fi
    done
    if [ $check -eq 0 ]; then
        echo "invalid network found"
        exit 1
    fi
    flags=""
    obj=$(cat $NETWORK_CACHE)
    device=$(echo "$obj" | cut -d "/" -f 2)
    conf=$NETWORKS$obj$CONF
    pkill wpa_supplicant
    _iplink "$device" "up"
    if [[ $(echo "$obj" | cut -d "/" -f 1) == "wired" ]]; then
        flags="-D wired"
    fi
    if [ -e $conf ]; then
        if [ -s $conf ]; then
            echo "running supplicant"
            /bin/bash -c "/usr/bin/wpa_supplicant -c $conf -i $device $flags"
        fi
    fi
    echo "connected: $obj"
}

_isroot() {
    if [ $UID -ne 0 ]; then
        echo "subcommand must be run as root"
        exit 1
    fi
}

networks=$(_get-nets)
action=$1
case $action in
    "disconnect")
        _isroot
        pkill wpa_supplicant
        sleep 3
        touch $NETWORK_KILL
        ;;
    "connect")
        _isroot
        if [ -s $NETWORK_CACHE ]; then
            for a in $(echo "$networks" | tr ' ' '\n' | cut -d "/" -f 2 | sort -u); do
                _iplink "$a" "down"
            done
            _connect
        fi
        ;;
    "list")
        echo "$CURRENT_KEY $RELOAD_KEY $networks" | tr ' ' '\n' | sort | tr '\n' ' '
        ;;
    "$CURRENT_KEY")
        if [ -e $NETWORK_CACHE ]; then
            cat $NETWORK_CACHE
        fi
        ;;
    "$RELOAD_KEY")
        touch $NETWORK_CACHE
        ;;
    *)
        if [ -e "$NETWORKS$action$CONF" ]; then
            echo "$action" > $NETWORK_CACHE
        else
            echo "invalid profile: $action"
        fi
esac
