#!/bin/bash
source $HOME/.bin/common
STAT_FILE=$USER_TMP/.stats.
STAT_BRIGHT=${STAT_FILE}brightness
STAT_EMAIL=${STAT_FILE}email
STAT_GIT=${STAT_FILE}git
GIT_PARTIAL_PATTERN="weechat|random_seed"

_get-git-folders() {
    local res f d
    res=""
    for d in "$HOME/workspace" "${PERM_LOCATION}"; do
        for f in $(find $d -maxdepth 2 -type d | sort); do
            if [ ! -d "$f/.git" ]; then
                continue
            fi
            res=$res" "$f
        done
    done
    echo $res
}

update-git() {
    if [ ! -e $GIT_CHANGES ]; then
        git-changing > $GIT_CHANGES
    fi
}

_brightness() {
    local b
    b=$(xrandr --current --verbose | grep "Brightness" | \
        cut -d ":" -f 2 | sed "s/0\.//g" | sed "s/1\.0/100/g" | \
        tail -n 1 | awk '{printf "%3.0f", $1}' | sed "s/^[ \t]*//g")
    printf '\xf0\x9f\x94\x86 %3i\n' $b
}

get-all-changes() {
    git update-index -q --refresh 
    git diff-index --name-only HEAD --
    git status -sb | grep 'ahead'
    git ls-files --other --exclude-standard
}

git-changing() {
    local cwd d_paths d local_res first
    cwd=$PWD
    d_paths="/etc $HOME $SYNCED_PATH "$(_get-git-folders)
    for d in $(echo "$d_paths"); do
        if [ ! -d "$d/.git" ]; then
            continue
        fi
        cd $d
        local_res=$(get-all-changes | grep -E -v "$GIT_PARTIAL_PATTERN")
        if [ ! -z "$local_res" ]; then
            if [ -z $first ]; then
                echo "uncommitted changes"
            fi
            echo -e "$d${RED_TEXT}"
            echo -e "$local_res${NORM_TEXT}" | sed "s/^/    /g"
            first="false"
        fi
    done
    cd $cwd
}

_up() {
    local last t n res check
    check=30
    res=$USER_TMP/.online.status
    last=$USER_TMP/.online
    if [ -e $res ]; then
        if [[ $(cat $res) == "offline" ]]; then
            check=5
        fi
    else
        rm -f $last
    fi
    if [ -e $last ]; then
        t=$(cat $last)
        n=$(date +%s)
        t=$((n-t))
        if [ $t -gt $check ]; then
            rm -f $last
        fi
    fi
    if [ ! -e $last ]; then 
        curl -s https://voidedtech.network > /dev/null
        if [ $? -eq 0 ]; then
            echo "online" > $res
            touch $SYS_ONLINE
        else
            echo "offline" > $res
            rm -f $SYS_ONLINE
        fi
        date +%s > $last
    fi
}

_unread() {
    local cnt raw res
    raw=$($HOME_BIN/email count)
    cnt=$(echo "$raw" | cut -d " " -f 1)
    if [ $cnt -gt 0 ]; then
        res=$(echo "$raw" | cut -d " " -f 2- | sed "s/ /\n/g" | cut -d ":" -f 1 | tr '[:lower:]' '[:upper:]' | sort -u | tr '\n' ',' | sed "s/,$//g")
        printf " %3s $res\n" "$cnt"
    else
        echo "no mail"
    fi
}

_cleanup() {
    for f in $STAT_BRIGHT $STAT_EMAIL $STAT_GIT; do
        cat $f | tail -n 5 | sponge $f
    done
}

stats() {
    local _git_text _last_cnt bright emails f idx
    _git_text=""
    _last_cnt=0
    _git_cnt=0
    if [ -e $GIT_CHANGES ]; then
        _git_cnt=$(cat $GIT_CHANGES | grep "    " | wc -l)
    else
        _git_cnt=$_last_cnt
    fi
    _last_cnt=$_git_cnt
    if [ $_git_cnt -gt 0 ]; then
        _git_text=$(printf "$_last_cnt HEAD^")
    else
        _git_text="up-to-date"
    fi
    update-git &
    _brightness >> $STAT_BRIGHT
    _unread >> $STAT_EMAIL
    echo "$_git_text" >> $STAT_GIT
    bright=$(_brightness)
    emails=$(_unread)
}

if [ -z "$1" ]; then
    stats
else
    s=${STAT_FILE}$1
    if [ -e $s ]; then
        echo '{ "full_text": " '$(cat ${STAT_FILE}$1 | tail -n 2 | head -n 1)' "},'
    else
        case "$1" in
            "cleanup")
                ;;
            "online")
                _up > /dev/null 2>&1 &
                ;;
            *)
                echo "unknown command: $1"
                ;;
        esac
    fi
fi
