#!/bin/bash
source $HOME/.bin/common
CACHE_LOCATION=${SYNCED_PATH}/configs/

#format is relay,destination,ssh-options
JUMP_DEF=${CACHE_LOCATION}ssh.jumps

# format is host,container
SSH_NSPAWN_CONFIG=${CACHE_LOCATION}containers.config

IS_LOCAL="localhost"
NSPAWN_KEY="nspawn"
JUMP_KEY="jump"
DELIMITER=","

touch $JUMP_DEF
touch $SSH_NSPAWN_CONFIG

function do-jump()
{
    if [ ! -e $JUMP_DEF ]; then
        echo "$JUMP_DEF does not exist"
        exit -1
    fi

    if [ -z $1 ]; then
        echo "requires a destination"
        exit -1
    fi

    matched=$(cat $JUMP_DEF | grep "$DELIMITER$1$DELIMITER")
    if [ -z $matched ]; then
        echo "no machine found matching $1"
        exit -1
    fi

    jump=$(echo $matched | cut -d "$DELIMITER" -f 1)
    args=$(echo $matched | cut -d "$DELIMITER" -f 3)
    if [ ! -z $args ]; then
        args="-o $args"
    fi
    ssh -t $jump ssh $1 $args
}

function print-jump-help()
{
    if [ -e $JUMP_DEF ]; then
        for line in $(cat $JUMP_DEF); do
            avail=$(echo $line | cut -d "$DELIMITER" -f 2)
            host=$(echo $line | cut -d "$DELIMITER" -f 1)
            args=$(echo $line | cut -d "$DELIMITER" -f 3)
            echo "    $avail (through $host) $args"
        done
    fi
}

function print-basic-help()
{
    echo "$NSPAWN_KEY (nspawn)
$JUMP_KEY (jump/forward through)"
}

function print-help()
{
    case $1 in
        $NSPAWN_KEY)
            print-nspawn-help
            ;;
        $JUMP_KEY)
            print-jump-help
            ;;
        *)
            print-basic-help
            ;;
    esac
}


function get-hostnames()
{
    for host in $(cat $SSH_NSPAWN_CONFIG | cut -d "$DELIMITER" -f 1); do
        echo "$host"
    done
    echo "$IS_LOCAL"
}

function get-hosts()
{
    get-hostnames | sort | uniq
}

function get-container-names()
{
    for container in $(cat $SSH_NSPAWN_CONFIG | grep "^$1$DELIMITER" | cut -d "$DELIMITER" -f 2); do
        echo "$container"
    done
}

function get-containers()
{
    get-container-names "$1" | sort
}

function valid-host()
{
    if [ -z "$1" ]; then
        echo "not found"
        exit -1
    fi
    get-hosts | grep -q "^$1$"
    if [ $? -ne 0 ]; then
        echo "not found -> $1"
        exit -1
    fi
}

function valid-container()
{
    valid-host "$1"
    get-containers "$1" | grep -q "^$2$"
    if [ $? -ne 0 ]; then
        echo "unknown container $2 for $1"
        exit -1
    fi
}

function connect-to()
{
    cmd="sudo machinectl shell $2"
    available=$(test-ssh "$1")
    if [ $available -ne $IS_CONNECTED ]; then
        echo "$1 is not available via ssh"
        exit -1
    fi
    cmd="ssh -t $1 '$cmd'"
    echo -e "connecting to \e[1m$2\e[0m on \e[1m$1\e[0m"
    eval $cmd
}

function print-nspawn-help()
{
    for line in $(resolve-nspawn-machine ""); do
        host=$(echo $line | cut -d "$DELIMITER" -f 1)
        cont=$(echo $line | cut -d "$DELIMITER" -f 2)
        echo "    $cont (via $host)"
    done
}

function resolve-nspawn-machine()
{
    config=$(cat $SSH_NSPAWN_CONFIG | grep "$DELIMITER$1")
    echo $config" "$local_config
}

function do-nspawn-connect()
{
    shortcut=$(resolve-nspawn-machine $1)
    host=$(echo $shortcut | cut -d "$DELIMITER" -f 1)
    cont=$(echo $shortcut | cut -d "$DELIMITER" -f 2)
    valid-container "$host" "$cont"
    connect-to "$host" "$cont"
}

ARG=$1
OPT=$2
if [ -z $OPT ]; then
    OPT=$ARG
    ARG=""
fi
case $ARG in
    $NSPAWN_KEY)
        do-nspawn-connect "$OPT"
        ;;
    $JUMP_KEY)
        do-jump "$OPT"
        ;;
    *)
        print-help "$OPT"
        ;;
esac
