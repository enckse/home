#!/bin/bash

for f in mutt mumble $BROWSER pavucontrol schroot makepkg repo-add mkarchroot; do
    alias $f="echo disabled in bash"
done

aem() {
    perl ~/.local/lib/aem.pl $@
}

container() {
    perl ~/.local/lib/containers.pl $@
}

pltidy() {
    local f
    for f in $(git grep "#\!/usr/bin/perl" | cut -d ":" -f 1 | sort); do
       perltidy $f
       mv $f.tdy $f
    done
}

_darcsmirror() {
    if [ ! -x /usr/bin/darcs ]; then
        echo "darcs not found"
        return
    fi
    from=$1
    to=$2
    if [ -z "$to" ]; then
        echo "no destination given"
        return
    fi
    if [ -z "$from" ]; then
        echo "no source given"
        return
    fi
    local tmpdir
    tmpdir=$(mktemp -d)
    cd $tmpdir && darcs clone $from from
    cd $tmpdir && git clone $to to
    touch $tmpdir/to/git.marks
    cd $tmpdir/from && darcs convert export --read-marks darcs.marks --write-marks darcs.marks | (cd ../to && git fast-import --import-marks=git.marks --export-marks=git.marks)
    rm $tmpdir/to/git.marks
    echo "done: $tmpdir"
}

mirror-hikari() {
    _darcsmirror https://hub.darcs.net/raichoo/hikari enckse:hikari-mirror
}

glint() {
    goimports -l . | grep -v bindata.go | sed 's/^/[goimports]    /g'
    revive ./... | sed 's/^/[revive]       /g'
}

_aem() {
    local opts cur
    cur=${COMP_WORDS[COMP_CWORD]}
    if [ $COMP_CWORD -eq 1 ]; then
        opts=$(perl ~/.local/lib/aem.pl help)
        COMPREPLY=( $(compgen -W "$opts" -- $cur) )
    else
        if [ $COMP_CWORD -ge 2 ]; then
            cur=${COMP_WORDS[1]}
            opts=""
            case "$cur" in
                "repo-add")
                    if [ $COMP_CWORD -eq 2 ]; then
                        opts="vpr.db.tar.gz apr.db.tar.gz"
                    else
                        opts=$(ls | grep ".pkg.tar.zst")
                    fi
                    ;;
                "detach-sign")
                    if [ $COMP_CWORD -eq 2 ]; then
                        opts=$(ls | grep ".pkg.tar.zst")
                    fi
                    ;;
            esac
            if [ ! -z "$opts" ]; then
                 COMPREPLY=( $(compgen -W "$opts" -- ${COMP_WORDS[COMP_CWORD]}) )
            fi
        fi
    fi
}

complete -F _aem aem

_container() {
    local opts cur
    cur=${COMP_WORDS[COMP_CWORD]}
    if [ $COMP_CWORD -eq 1 ]; then
        opts=$(perl ~/.local/lib/containers.pl)
        COMPREPLY=( $(compgen -W "$opts" -- $cur) )
    fi
}

complete -F _container container
