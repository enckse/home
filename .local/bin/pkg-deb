#!/usr/bin/python3
import subprocess
import os
import common
import configparser
import debian
import shutil

_BUILDDEPS = ["make",
              "git",
              "debhelper",
              "bash-completion",
              "quilt",
              "dh-make"]
_LINT = "lint.log"
_DEBIAN = "debian"
_BIN = "bin"
_PATH = "path://"


def _precheck():
    """Pre-check before working."""
    valid = True
    for b in _BUILDDEPS:
        r = subprocess.call(["dpkg-query",
                             "-W",
                             "--showformat='${Status}\n'",
                             b],
                            stdout=subprocess.DEVNULL)
        if r != 0:
            print("missing builddep: " + b)
            valid = False
    return valid


def _setting_bool(config, key, default):
    """Default bool setting."""
    if key in config:
        v = config[key].lower()
        if v in ["false", "true"]:
            if v == "true":
                return True
            else:
                return False
    return default


def _required(obj, key):
    """Check for required keys."""
    if key not in obj:
        print(key + " is missing")
        return None
    return obj[key]


def _read_version():
    c = _DEBIAN + "/changelog"
    if os.path.exists(c):
        with open(c, 'r') as f:
            for line in f:
                if "(" in line:
                    parts = line.split("(")
                    pkgver = parts[1].split(")")[0].split("-")[0]
                    return pkgver
                break
    return None


def _git_clone(env, settings, pkgver):
    if not os.path.exists(env.DEB_BUILD_DIR):
        print("no build dir")
        return
    clone_dir = os.path.join(env.DEB_BUILD_DIR, settings.name + "-" + pkgver)
    print("clone dir: " + clone_dir)
    if os.path.exists(clone_dir):
        shutil.rmtree(clone_dir)
    git_args = ["git", "clone"]
    use_url = settings.url
    is_local = use_url.startswith(_PATH)
    if not is_local and settings.git_checkout:
        git_args += ["--branch", settings.git_version]
    if not is_local and settings.git_shallow:
        git_args += ["--depth", "1"]
    if is_local:
        use_url = use_url.replace(_PATH, "")
        if use_url.startswith("."):
            use_url = os.path.abspath(os.path.join(os.getcwd(), use_url))
        shutil.copytree(use_url, clone_dir)
        manual = True
    if not is_local:
        git_args += [use_url, clone_dir]
        subprocess.call(git_args)
    return clone_dir


def _build(env, settings):
    """Perform a build."""
    pkgver = _read_version()
    if pkgver is None:
        print("unable to detect package version")
        return
    print("using version: " + pkgver)
    if settings.git_version is None:
        settings.git_version = pkgver
    else:
        settings.git_version = settings.git_version.replace("PKGVER", pkgver)
    for d in [env.DEB_BUILD_ROOT, env.DEB_BUILD_DIR]:
        print("cleaning: " + d)
        for f in os.listdir(d):
            p = os.path.join(d, f)
            if d == env.DEB_BUILD_ROOT:
                if p in env.DEB_BUILD_DIR or env.DEB_BUILD_DIR in p:
                    continue
            if os.path.isdir(p):
                print("rmdir'ing: " + p)
                shutil.rmtree(p)
                continue
            print("removing: " + p)
            os.remove(p)
    source = _git_clone(env, settings, pkgver)
    if source is None:
        return
    origname = "../{}_{}.orig.tar.xz".format(settings.name, pkgver)
    if os.path.exists(origname):
        os.remove(origname)
    git_dir = os.path.join(source, ".git")
    if os.path.exists(git_dir):
        shutil.rmtree(git_dir)
    shutil.copytree(_DEBIAN, os.path.join(source, _DEBIAN))
    for root, _, files in os.walk(source):
        for f in files:
            makefile = os.path.join(root, f)
            if "Makefile" in makefile:
                print("adjusting Makefile for version: " + makefile)
                subprocess.call(["sed", "-i", "/^VERSION/ d", makefile])
                subprocess.call(["sed",
                                 "-i",
                                 "1s/^/VERSION := {}\\n/".format(pkgver),
                                 makefile])
    cwd = os.getcwd()
    bindir = os.path.join(cwd, _BIN)
    if os.path.exists(bindir):
        shutil.rmtree(bindir)
    os.mkdir(bindir)
    os.chdir(source)
    subprocess.call(["dh_make", "-s", "-y", "--createorig"])
    environ = os.environ
    environ["DEB_SRC_DIR"] = source
    print('building package...')
    subprocess.call(["dpkg-buildpackage", "-us", "-uc"],
                    env=environ,
                    cwd=source)
    os.chdir("..")
    debs = []
    for f in os.listdir("."):
        if f.endswith(debian.DEB):
            if "dbgsym" in f:
                continue
            debs.append(f)
            shutil.move(f, os.path.join(bindir, f))
    if len(debs) == 0:
        print("no debs produced")
        return
    os.chdir(cwd)
    lint_log = os.path.join(bindir, "lint.log")
    lint_tmp = lint_log + ".tmp"
    mani = os.path.join(bindir, "manifest")
    manifests = []
    with open(lint_tmp, 'w') as f:
        for d in debs:
            bname = d.split("_")[0]
            deb_mani = mani + "." + bname
            with open(deb_mani, 'w') as manifest:
                bin_deb = os.path.join(_BIN, d)
                print("post processing {}".format(bin_deb))
                subprocess.call(["lintian", bin_deb], stdout=f)
                subprocess.call(["debsigs",
                                 "--sign=origin",
                                 "-k",
                                 env.DEB_SIGN_KEY,
                                 bin_deb])
                subprocess.call(["dpkg", "-c", bin_deb], stdout=manifest)
                manifests.append(deb_mani)
    with open("install.manifest", 'w') as output:
        output.write("files:\n")
        for m in sorted(manifests):
            bname = m.split(".")[-1]
            with open(m, 'r') as f:
                lines = []
                for line in f:
                    while "  " in line:
                        line = line.replace("  ", " ")
                    line = line.split(" ")[5].strip()
                    line = line.replace("./", "").strip()
                    lines.append(line)
                lines = sorted([bname + ": " + x for x in lines if x])
                for l in lines:
                    output.write(l + "\n")
    subprocess.call(["sort", "-o", lint_log, lint_tmp])
    res = subprocess.call(["diff", "-u", lint_log, _LINT])
    if res != 0:
        print("lint change detected ^")


def _settings(config, package):
    """Load settings."""
    o = common.Object()
    o.gopath = _setting_bool(package, "gopath", True)
    o.make_version = _setting_bool(package, "makever", True)
    o.git_checkout = True
    o.git_version = None
    if "git" in config:
        g = config["git"]
        o.git_checkout = _setting_bool(g, "checkout", True)
        o.git_shallow = _setting_bool(g, "shallow", True)
        if "version" in g:
            o.git_version = g["version"]
    return o


def main():
    """Program entry."""
    if not _precheck():
        return
    config = configparser.ConfigParser()
    config.read("pkg.cfg")
    p = _required(config, "package")
    if not p:
        return
    settings = _settings(config, p)
    settings.name = _required(p, "name")
    settings.url = _required(p, "url")
    env = common.read_env()
    if not os.path.exists(_LINT):
        print("missing lint file")
        return
    _build(env, settings)


if __name__ == "__main__":
    main()
