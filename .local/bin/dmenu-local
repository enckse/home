#!/usr/bin/python3
"""dmenu wrapper."""
import sys
import common
import os
import csv
import subprocess


_BROWSER = "/usr/bin/firefox"
_GMUTT = "gmail"
_FASTMUTT = "fastmail"
_PASSWORDS = "passwords"
_LOCALS = [_GMUTT, _FASTMUTT, _PASSWORDS]
_APPS = ["vlc", "pavucontrol", "zim"] + _LOCALS
_SEARCH = "search "


def _search(term):
    """Search for a term via browser."""
    import urllib.parse
    if term.startswith(_SEARCH):
        term = term[len(_SEARCH):]
    query = {}
    query["q"] = term
    params = urllib.parse.urlencode(query)
    subprocess.call([_BROWSER,
                     "https://www.duckduckgo.com/?{}".format(params)])


def _local(env, cmd):
    """Run a local command."""
    command = ["kitty",
               "--title={}".format(cmd),
               os.path.join(env.HOME_BIN, "email"),
               "client",
               cmd]
    if cmd == _PASSWORDS:
        command = ["keepassx", os.path.join(env.PRIV_PATH, "passwords")]
    subprocess.call(command)


def _dmenu(env, args):
    """dmenu backing call."""
    urls = os.path.join(env.PERM_CONFIGS, "urls.csv")
    available = {}
    dmenu_cmd = ["dmenu"] + args
    with open(urls, 'r') as f:
        reader = csv.reader(f)
        for r in reader:
            name = r[0]
            url = r[1]
            args = r[2].split(" ")
            args = [x for x in args if x]
            available[name] = [_BROWSER] + args + [url]
    for a in _APPS:
        available[a] = a
    p = subprocess.Popen(dmenu_cmd,
                         stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    options = sorted(available.keys())
    stdout, err = p.communicate(input=("\n".join(options)).encode("utf-8"))
    if err is not None:
        return
    result = stdout.decode("utf-8").strip()
    if result in options:
        cmd = result.lower()
        if cmd in _LOCALS:
            _local(env, cmd)
        else:
            c = available[cmd]
            subprocess.call(c)
    else:
        if "." in result and " " not in result:
            subprocess.call([_BROWSER, result])
            return
        if not result:
            return
        _search(result)


def main():
    """Program entry."""
    args = []
    if len(sys.argv) > 1:
        args = sys.argv[1:]
    env = common.read_env()
    _dmenu(env, args)


if __name__ == "__main__":
    main()
