#!/usr/bin/python3
"""Perform status operations."""
import argparse
import sys
import common
import datetime
import time
import git
import subprocess
import os
import mail
import display
import vol


_DELIMITER = "|"
_NOTIFICATIONS = 10
_NOTIFY_LEN = _NOTIFICATIONS + 5
_WEEKDAYS = {}
_WEEKDAYS[0] = "mo"
_WEEKDAYS[1] = "tu"
_WEEKDAYS[2] = "we"
_WEEKDAYS[3] = "th"
_WEEKDAYS[4] = "fr"
_WEEKDAYS[5] = "sa"
_WEEKDAYS[6] = "su"


def _notify(message):
    """Create a status notification."""
    common.notify(message, _NOTIFY_LEN)


def _notifications(env):
    """Notification outputs."""
    git_tmp = env.GIT_STATUS + ".tmp"
    with open(git_tmp, 'w') as f:
        g = git.status(env, f)
    os.rename(git_tmp, env.GIT_STATUS)
    if os.path.exists(env.HIDE):
        return
    if g > 0:
        _notify("{} ^AHEAD^".format(g))
    cnt = mail.count(env)
    if len(cnt) > 0:
        _notify(" ".join(cnt))


def _run_command(cmd, append):
    out, err = common.get_output_or_error(cmd)
    if err is None:
        o = out.decode("utf-8").strip()
        if o:
            append.append(o)


def _daemon(env):
    """Daemon runner."""
    state = _NOTIFICATIONS
    if os.path.exists(env.HIDE):
        os.remove(env.HIDE)
    while True:
        t = datetime.datetime.now()
        w = t.weekday()
        wd = "un"
        if w in _WEEKDAYS:
            wd = _WEEKDAYS[w]
        wd = wd.upper()
        time_format = t.strftime("%Y-%m-%d{}{}{}%H:%M".format(_DELIMITER,
                                                              wd,
                                                              _DELIMITER))
        outputs = [time_format]
        locked = common.lock_status(env)
        if locked:
            outputs.append(locked)
        bright = display.get_brightness()
        outputs.append("disp:{}".format(bright))
        if vol.ismute():
            volume = "0"
        else:
            volume = vol.status()
        outputs.append("vol:{}".format(volume))
        charge = "?"
        charging = False
        with open("/sys/class/power_supply/AC/online", 'r') as f:
            if f.read().strip() == "0":
                charge = "-"
            else:
                charging = True
                charge = "+"
        total_bat = 0
        batteries = []
        for b in range(0, 2):
            bat = "/sys/class/power_supply/BAT{}/capacity".format(b)
            with open(bat, 'r') as f:
                per = f.read().strip()
                total_bat += float(per)
                batteries.append(per)
        if total_bat < 20 and not charging:
            _notify("WARNING: BATTERY")
        b = ",".join(batteries)
        b = "bat:{}({})".format(charge, b)
        outputs.append(b)
        if common.is_online():
            outputs.append("UP")
        else:
            outputs.append("DOWN")
        _run_command(["wsw", "--mode", "addr"], outputs)
        subprocess.call(["xsetroot", "-name", _DELIMITER.join(outputs)])
        if state >= _NOTIFICATIONS:
            _notifications(env)
            state = -1
        state += 1
        time.sleep(1)


def main():
    """Program entry."""
    parser = argparse.ArgumentParser()
    parser.add_argument("command")
    args = parser.parse_args()
    env = common.read_env()
    env.HIDE = os.path.join(env.USER_TMP, "hidden.status")
    env.GIT_STATUS = os.path.join(env.USER_TMP, "git.status")
    if args.command == "git":
        text = None
        try:
            with open(env.GIT_STATUS, 'r') as f:
                text = [x.rstrip() for x in f.readlines()]
        except Exception as e:
            pass
        if text:
            first = True
            for l in text:
                if first:
                    print(l)
                    common.red_text()
                    first = False
                    continue
                print(l)
            common.normal_text()
    elif args.command == "daemon":
        env = common.add_env(env)
        _daemon(env)
    elif args.command == "toggle":
        show = True
        if os.path.exists(env.HIDE):
            show = False
            os.remove(env.HIDE)
        else:
            open(env.HIDE, 'w').close()
        _notify("show notifications? {}".format(show).lower())
    elif args.command == "journal":
        if os.path.exists(env.JOURNALS):
            first = True
            with open(env.JOURNALS, 'r') as f:
                for l in f.readlines():
                    if first:
                        print("journal:")
                        common.red_text()
                        first = False
                    print("    -> {}".format(l))
            if not first:
                common.normal_text()
                print("clear-journal to suppress")
    else:
        print("unknown command")


if __name__ == "__main__":
    main()
