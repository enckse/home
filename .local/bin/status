#!/bin/bash
source $HOME/.config/home/common
STAT_GIT=${USER_TMP}/stats.git
GIT_PARTIAL_PATTERN="weechat|random_seed"
STAT_LOCK=${USER_TMP}/stat.lock
STATUS_CMD=$HOME_BIN/status
VOLUME_CMD=$HOME_BIN/volume
LOCK_CMD=$HOME_BIN/locking

_get-git-folders() {
    local res f d search
    res=""
    search=""
    for d in $(find $PERM_LOCATION -maxdepth 1 -type d); do
        search="$search $d"
    done
    search=$(echo "$search" | sort -u)
    for d in "$HOME/workspace" $search; do
        for f in $(find $d -maxdepth 1 -type d | sort); do
            if [ ! -d "$f/.git" ]; then
                continue
            fi
            res=$res" "$f/
        done
    done
    echo $res
}

get-all-changes() {
    git update-index -q --refresh 
    git diff-index --name-only HEAD --
    git status -sb | grep 'ahead'
    git ls-files --other --exclude-standard
}

git-changing() {
    local cwd d_paths d local_res first
    cwd=$PWD
    d_paths="/etc $HOME "$(_get-git-folders)
    for d in $(echo "$d_paths"); do
        if [ ! -d "$d/.git" ]; then
            continue
        fi
        cd $d
        local_res=$(get-all-changes | grep -E -v "$GIT_PARTIAL_PATTERN")
        if [ ! -z "$local_res" ]; then
            if [ -z $first ]; then
                echo "uncommitted changes"
            fi
            echo -e "$d${RED_TEXT}"
            echo -e "$local_res${NORM_TEXT}" | sed "s/^/    /g"
            first="false"
        fi
    done
    cd $cwd
}

_up() {
    curl --retry 3 --retry-delay 3 --connect-timeout 3 -s https://voidedtech.com > /dev/null
    if [ $? -eq 0 ]; then
        touch $SYS_ONLINE
    else
        rm -f $SYS_ONLINE
    fi
}

_unread() {
    local cnt raw res
    raw=$($HOME_BIN/email count)
    cnt=$(echo "$raw" | cut -d " " -f 1)
    if [ -z "$raw" ]; then
        echo
    else
        echo "$raw"
    fi
}

_checkgit() {
    local _git_cnt
    git-changing > $GIT_CHANGES
    _git_cnt=$(cat $GIT_CHANGES | grep "    " | wc -l)
    if [ $_git_cnt -gt 0 ]; then
        echo "$_git_cnt HEAD^"
    else
        echo
    fi
}

stats() {
    rm -f $STAT_LOCK
    touch $STAT_LOCK
    _checkgit > $STAT_GIT
    rm -f $STAT_LOCK
}

_ipaddr() {
    ip addr | grep "$1" | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1 -d'/' | grep '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$'
}

_output() {
    local v
    date +%Y-%m-%dT%H:%M
    v=$($STATUS_CMD git)
    if [ ! -z "$v" ]; then
        echo "$v" | sed "s/ /->/g"
    fi
    v=$($LOCK_CMD status)
    if [ ! -z "$v" ]; then
        echo "$v"
    fi
    v=$($STATUS_CMD email | sed "s/^\s*//g;s/\s*$//g")
    if [ ! -z "$v" ]; then
        echo "$v" | cut -d ":" -f 1 | tr '[:lower:]' '[:upper:]'
        notify-send -t 5000 "$v"
    fi
    echo "brightness:"$(xrandr --current --verbose | grep "Brightness" | cut -d ":" -f 2 | sed "s/0\.//g" | sed "s/1\.0/100/g" | tail -n 1 | awk '{printf "%3.0f", $1}') | sed "s/ //g"
    local muted
    local vol
    muted=$($VOLUME_CMD ismute)
    if [[ "$muted" == "true" ]]; then
        vol="0"
    else
        vol=$($VOLUME_CMD volume)
    fi
    echo "volume:$vol"
    local bat
    local charge
    charge=$(cat /sys/class/power_supply/AC/online)
    if [[ "$charge" == "0" ]]; then
        charge="-"
    else
        charge="+"
    fi
    local cntcharge=0
    local spacer=""
    for b in $(echo 0 1); do
        local per=$(cat /sys/class/power_supply/BAT$b/capacity)
        bat="$bat$spacer$per%"
        cntcharge=$((cntcharge+per))
        if [ $b -eq 0 ]; then
            spacer=","
        fi
    done
    if [ $cntcharge -lt 20 ]; then
        if [[ "$charge" == "-" ]]; then
            notify-send -t 1000 "WARNING: BATTERY"
        fi
    fi
    echo "battery:$charge($bat)"
    for a in $(echo "wlp3s0 enp0s31f6"); do
        local addr=$(_ipaddr $a)
        if [ ! -z "$addr" ]; then
            echo "$a:$addr"
        fi
    done
}

outputs() {
    xsetroot -name $(_output | sed "s/ /|/g" | tr '\n' '|')
}

if [ -z "$1" ]; then
    pidfile="/tmp/status.pid"
    if [ -e "$pidfile" ]; then
        p=$(cat $pidfile)
        kill -0 $p
        if [ $? -eq 0 ]; then
            exit 0
        fi
    fi
    cnt=0
    while [ 1 -eq 1 ]; do
        stats
        outputs
        echo $$ > $pidfile
        sleep 1
        cnt=$((cnt+1))
        if [ $cnt -gt 15 ]; then
            cnt=0
            _up > /dev/null 2>&1 &
        fi
    done
else
    case "$1" in
        "git")
            while [ -e $STAT_LOCK ]; do
                sleep 0.1
            done
            cat ${STAT_GIT} | tail -n 1
            ;;
        "email")
            _unread
            ;;
        *)
            echo "unknown command: $1"
            ;;
    esac
fi
