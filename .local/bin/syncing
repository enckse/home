#!/bin/bash
source $HOME/.config/home/common
source $PRIV_CONF
COMMON_STORE=/mnt/Storage/Active/
PROFILE_PATH=${COMMON_STORE}Rolling/profiles
SPACING="    "
TODAY=$(date +%Y-%m-%d-%p)
ARCHIVE=${USER_TMP}profile.$TODAY.tar.gz
BACKUP=${USER_TMP}profile.backup.$TODAY
GIT_SYNC=${USER_TMP}git.sync
GIT_PREV=${GIT_SYNC}.prev
READY="ready"
IS_CONNECTED=1
NOT_CONNECTED=0

test-ssh() {
    local running
    running=$(ssh -o BatchMode=yes -o ConnectTimeout=5 $1 echo $READY 2>&1)
    if [[ "$running" == "$READY" ]]; then
        echo $IS_CONNECTED
    else
        echo $NOT_CONNECTED
    fi
}

_dobackup() {
    if [ -e "$BACKUP" ]; then
        echo 0
    else
        echo 1
    fi
}

_backup() {
    echo "daily backup"
    if [ ! -e $ARCHIVE ]; then
        echo "archiving"
        tar zcf $ARCHIVE $HOME/.mozilla/ ${HOME_SCRATCH} &>/dev/null
        echo "archive completed: $?"
    fi
    echo "${SPACING}pushing profile out"
    scp $ARCHIVE $BASE_SERVER:$PROFILE_PATH/
    ssh $BASE_SERVER "find $PROFILE_PATH -type f -mtime +7 -exec rm {} \;"
    rm -f $ARCHIVE
    touch $BACKUP
}

_rsync() {
    rsync -avc --delete-after -e "ssh" $1 $2 | grep -v "^$" | sed "s/^/$SPACING/g"
}

_dogit() {
    local d changes
    echo "git" > $GIT_SYNC
    for d in $(echo "$@"); do
        git -C "$d" log --pretty=format:'%h' -n 1 >> $GIT_SYNC
        echo ": $d" >> $GIT_SYNC
    done
    changes=1
    if [ -e "$GIT_PREV" ]; then
        diff -u $GIT_PREV $GIT_SYNC > /dev/null
        if [ $? -eq 0 ]; then
            changes=0
        fi
    fi
    echo $changes
}

_gitpush() {
    local d
    echo "syncing..."
    for d in $(echo "$@"); do
        echo "$d"
        git -C "$d" push 2>&1 | sed "s/^/$SPACING/g"
    done
    if [ -e $GIT_SYNC ]; then
        mv $GIT_SYNC $GIT_PREV
    fi
}

_sendzips() {
    local f hashed prev last bname
    echo "sending zips..."
    for f in $(echo "$@" | tr ' ' '\n' | grep -v "$HOME_STORE"); do
        bname=$(basename $f)
        prev=$USER_TMP$bname.ziphash
        hashed=$(git -C $f rev-parse HEAD)
        echo "checking zip status: $f"
        zip=1
        if [ -e $prev ]; then
            last=$(cat $prev)
            if [[ "$last" == "$hashed" ]]; then
                zip=0
            fi
        fi
        if [ $zip -eq 1 ]; then
            echo "zipping..."
            7z a -p$ZIP_PASS ${USER_TMP}$bname.$TODAY-$(date +%s).7z $f/ > /dev/null
        fi
        echo "$hashed" > $prev
    done
}

_mailzips() {
    if [ -e $SYS_ONLINE ]; then
        local name f
        for f in $(find $USER_TMP -type f -name "*.7z"); do
            name=$(basename $f | cut -d "." -f 1)
            echo "sending: $zips"
            mutt -s "automated: zips ($name) $TODAY" -F $HOME/.mutt/fastmail.muttrc -a $f -- $ZIP_MAIL < /dev/null
            if [ $? -eq 0 ]; then
                rm -f $f
            fi
        done
    fi
}

sync-now() {
    local dirs pushgit pushbackup
    touch $TRIGGER_MAIL
    dirs=$(ls ${PERM_LOCATION} | grep personal | sed "s#^#$PERM_LOCATION#g")
    dirs="$dirs ${PRIV_PATH} ${HOME_STORE}"
    pushgit=$(_dogit "$dirs" | tail -n 1)
    pushbackup=$(_dobackup | tail -n 1)
    echo "status (git: $pushgit, archive: $pushbackup)"
    if [ $pushgit -eq 1 ]; then
        _sendzips "$dirs"
    fi
    _mailzips
    if [ $pushgit -eq 0 ]; then
        if [ $pushbackup -eq 0 ]; then
            exit 0
        fi
    fi
    auth=$(cat $SSH_AUTH_TMP)
    export SSH_AUTH_SOCK=$auth
    available=$(test-ssh $BASE_SERVER)
    echo "====================="
    echo "running "$(date +%Y-%m-%dT%H:%M:%S)
    echo "====================="
    echo "checked for connection...$available"
    if [ $available -eq $IS_CONNECTED ]; then
        if [ -e $SSH_AUTH_TMP ]; then
            if [ $pushgit -eq 1 ]; then
                _gitpush "$dirs"
            fi
            if [ $pushbackup -eq 1 ]; then
                _backup
            fi
            echo "local sync completed"
            touch $LAST_SYNC
        else
            echo "ssh agent unavailable"
        fi
    fi
}

network=$(${HOME_BIN}/wsw current)
echo $network | grep -q -E "$NET_SYNC"
if [ $? -ne 0 ]; then
    exit 0
fi

sync-now >> ${USER_TMP}sync.$TODAY
