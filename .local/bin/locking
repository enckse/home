#!/usr/bin/python
"""Handles locking."""
import argparse
import common
import os
import subprocess
import time
import display
import vol

_LOCK = "lock"


def _is_locked():
    res = subprocess.call(["pidof", "i3lock"])
    return res == 0


def _suspend(env):
    """Suspend."""
    if os.path.exists(env.nosleep):
        return
    for p in ["smplayer", "mplayer"]:
        subprocess.call(["pkill", p])
    subprocess.call(["systemctl", "suspend"])
    time.sleep(5)


def _i3lock(env, now=False):
    """unable i3lock."""
    subprocess.call(["i3lock", "-c", "333333"])
    vol.mute(force=True)
    display.backlight(display.LOW_BACKLIGHT)
    running = True
    start = time.time()
    lock_now = now
    while running:
        if not lock_now:
            time.sleep(1)
        if lock_now or _is_locked():
            current = time.time()
            elapsed = current - start
            if lock_now or elapsed > 300:
                _suspend(env)
                lock_now = False
                start = time.time()
            continue
        running = False
    display.on()
    display.backlight(display.MID_BACKLIGHT)


def _sleep(env):
    if os.path.exists(env.unlocked):
        return
    _i3lock(env, now=True)


def _lock(env):
    """Lock the screen."""
    if os.path.exists(env.unlocked):
        return
    if not _is_locked():
        _i3lock(env)


def _toggle(env):
    """Toggle locking settings."""
    locking = os.path.exists(env.unlocked)
    nosleep = os.path.exists(env.nosleep)
    if locking:
        os.remove(env.unlocked)
        common.touch(env.nosleep)
        return
    if nosleep:
        os.remove(env.nosleep)
        return
    common.touch(env.unlocked)


def main():
    """Program entry."""
    parser = argparse.ArgumentParser()
    parser.add_argument("--command", default=_LOCK)
    args = parser.parse_args()
    env = common.read_env()
    env = common.add_env(env)
    if args.command == "toggle":
        _toggle(env)
    elif args.command == _LOCK:
        _lock(env)
    elif args.command == "sleep":
        _sleep(env)


if __name__ == "__main__":
    main()
