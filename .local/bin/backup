#!/usr/bin/perl
use strict;
use warnings;

my $cache = $ENV{"HOME"} . "/.cache/backup/";
mkdir $cache if !-d $cache;
my $tmp = "/tmp/backup/";
mkdir $tmp if !-d $tmp;
my $check = `date +%Y-%m-%d.%H`;
chomp $check;
$check = $tmp . $check;
my $hashes    = $cache . "hashes";
my $lasthash  = $hashes . ".prev";
my $backuplog = $check . ".log";
my $server    = $ENV{"SERVER"};
my $notice    = $tmp . "notify";

my $mirrors = $ENV{"HOME"} . "/store/personal/mirror/";

sub dryrun {
    system("touch $hashes $lasthash");
    if ( -e $check ) {
        return;
    }
    for ( ( $mirrors ) ) {
        if ( -d $_ ) {
            system(
"find $_ -type f -printf '%p.%TY-%Tm-%TdT%TH:%TM:%TS\n' | grep -v gnupg | sort >> $hashes"
            );
        }
    }
    system("touch $notice")
      if system("diff -u $hashes $lasthash > $backuplog") != 0;
    system("mv $hashes $lasthash");
}

if (@ARGV) {
    my $mode = shift @ARGV;
    if ( $mode eq "status" ) {
        exit 1 if ( -e $notice );
        dryrun;
        system("touch $check");
        exit 0;
    }
    elsif ( $mode eq "clear" ) {
        exit 0;
    }
    else {
        die "unknown command: $mode";
    }
}

die "backup system unavailable"
  if system(
"ssh -o BatchMode=yes -o ConnectTimeout=5 $server echo is-online > /dev/null"
  );

print "\n=> cleaning up cache\n";
system("find $cache -type f -mtime +30 -exec rm {} \\;");

if ( -d $mirrors ) {
    print "backing up mirrors\n";
    for (`ls $mirrors`) {
        chomp;
        system(
    "rsync -avcr --delete-after $mirrors/$_/ $server:~/store/Active/Drop/Mirror/$_ | sed 's/^/$_ ->    /g'"
        );
    }
}

system("rm -f $check");
dryrun;

system("rm -f $notice");
system("rsync -av /var/cache/voidedtech/backup/ $server:/var/cache/voidedtech/backup/");
