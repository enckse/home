#!/usr/bin/perl
use strict;
use warnings;

my $cache = $ENV{"HOME"} . "/.cache/backup/";
mkdir $cache if !-d $cache;
my $tmp = "/tmp/backup/";
mkdir $tmp if !-d $tmp;
my $check = `date +%Y-%m-%d.%H`;
chomp $check;
$check = $tmp . $check;
my $notify   = $ENV{"NOTIFY_MESSAGES"} . "/backup";
my $hashes   = $cache . "hashes";
my $lasthash = $hashes . ".prev";
my $backuplog = $check . ".log";

my $mirrors = $ENV{"HOME"} . "/store/personal/mirror/";
my $repo    = $ENV{"HOME"} . "/store/personal/private/";

sub dryrun {
    if ( -e $check ) {
        return;
    }
    system("touch $hashes $lasthash");
    for ( ( $mirrors, $repo ) ) {
        system(
"find $_ -type f -printf '%p.%TY-%Tm-%TdT%TH:%TM:%TS\n' | sort >> $hashes"
        );
    }
    system("echo 'backup:required' > $notify")
      if system("diff -u $hashes $lasthash > $backuplog") != 0;
    system("mv $hashes $lasthash");
}

sub clean {
    system("rm -f $notify");
}

if (@ARGV) {
    my $mode = shift @ARGV;
    if ( $mode eq "status" ) {
        dryrun;
        system("touch $check");
        exit 0;
    }
    elsif ( $mode eq "clear" ) {
        clean;
        exit 0;
    }
    else {
        die "unknown command: $mode";
    }
}

die "backup system unavailable"
  if system(
    "ssh -o BatchMode=yes -o ConnectTimeout=5 core echo is-online > /dev/null");

print "\n=> cleaning up cache\n";
system("find $cache -type f -mtime +30 -exec rm {} \\;");

print "backing up mirrors\n";
for (`ls $mirrors`) {
    chomp;
    system(
"rsync -avcr --delete-after $mirrors/$_/ core:~/store/Active/Drop/Mirror/$_ | sed 's/^/$_ ->    /g'"
    );
}

print "\n=> backing up git repos\n";
my $zippass = `PASSWORD_STORE_DIR=~/.pass/personal pass show keys/zips`;
chomp $zippass;
my $commit = `git -C $repo log --format=%h -n 1`;
chomp $commit;
my $zipfile = $cache . "private.$commit.7z";
if ( !-e $zipfile ) {
    system(
        "7z a -spf -p$zippass $zipfile \$(find $repo -type f | grep -v '\\.git')"
    );
    system(
        "perl ~/.local/lib/inbox.pl --input $zipfile --subject 'private.zip'");
}

system("rm -f $notify $check");
dryrun;

print "\n=> syncing profiles\n";
system(
    "ssh core 'find ~/store/Active/Drop/Profiles -mtime +7 -exec rm {} \\;'");
my $profile = `date +%s`;
chomp $profile;
$profile = $cache . "profiles.$profile.tar.xz";
my $packages = $cache . "packages";
system("pcm packages > $packages");
system("tar cJf $profile ~/.config/chromium ~/.bash_history $packages 2> /dev/null");
system("scp $profile core:~/store/Active/Drop/Profiles/");
system("rm -f $profile");

print "\n=> sending backups\n";
if ( system("exit \$(ls $cache | grep backup.tar.gz | wc -l)") ) {
    system("scp $cache*.backup.tar.gz core:~/store/Active/Drop/Profiles/");
    system("rm -f $cache*.backup.tar.gz");
}
clean;
