#!/usr/bin/python3
import argparse
import os
import subprocess
import debian

_PREV = ".prev"


def _move(src, dest, manifest):
    """Pool a package."""
    bname = os.path.basename(src)
    to = os.path.join(dest, bname)
    if os.path.exists(to):
        print(bname + " is already deployed")
        return
    name = bname.split("_")[0]
    prevs = False
    checks = []
    operations = []
    for f in os.listdir(dest):
        if f.endswith(_PREV):
            print("removing " + f)
            os.remove(os.path.join(dest, f))
        if not f.endswith(debian.DEB):
            continue
        fname = f.split("_")[0]
        if fname == name:
            if not prevs:
                print("previous version(s) exist")
                prevs = True
            print("  -> " + f)
        else:
            checks.append(f)
    if len(checks) > 0:
        currents = []
        for l in debian.parse_manifest(manifest):
            currents.append(l.deb)
        for c in checks:
            if c not in currents:
                print(c + " is not in a manifest (will be deleted)")
                fpath = os.path.join(dest, c)
                operations.append(["mv", fpath, fpath + _PREV])
    operations.append(["cp", src, dest])
    for o in operations:
        subprocess.call(o)


def _pool(src, dest):
    """Add a package to the pool."""
    valid = True
    if os.path.exists(src):
        if not os.path.isfile(src) or not src.endswith(debian.DEB):
            print("file is not a " + debian.DEB)
            valid = False
    else:
        valid = False
        print("source does not exist")
    manifest = os.path.join(dest, debian.MANIFEST)
    if os.path.exists(dest):
        if os.path.isdir(dest):
            if not os.path.exists(manifest):
                print("invalid directory, not a pool")
                valid = False
        else:
            print("dest is not a directory")
            valid = False
    else:
        valid = False
        print("pool does not exist")
    if not valid:
        return
    _move(src, dest, manifest)


def main():
    """Program entry."""
    parser = argparse.ArgumentParser()
    parser.add_argument("deb")
    parser.add_argument("destination")
    args = parser.parse_args()
    _pool(args.deb, args.destination)


if __name__ == "__main__":
    main()
