#!/bin/bash
HOME_CONFIG=$HOME/.config/epiphyte/env
if [ -e $HOME_CONFIG ]; then
    source $HOME_CONFIG
fi

LOCAL_REPOS=$1
if [ -z "$1" ]; then
    echo "repo path required..."
    exit 1
fi

if [ ! -d "$LOCAL_REPOS" ]; then
    echo "$LOCAL_REPOS does not exist/is not a directory"
    exit 1
fi

MANIFEST=$LOCAL_REPOS/manifest
if [ ! -e "$MANIFEST" ]; then
    echo "no manifest file found..."
    exit 1
fi

tmpdir=$(mktemp -d)
cd $tmpdir
PACKED=packages.tar.gz
echo "$tmpdir"
dated=$(date +%Y-%m-%d-%H-%M-%S)
for c in $(cat $MANIFEST | cut -d ":" -f 1 | sort -u); do
    codename=""
    case $c in
        "stable")
            codename="stretch"
            ;;
        "unstable")
            codename="sid"
            ;;
        *)
            echo "unknown: $c"
            exit 1
            ;;
    esac
    rel=dists/$c/
    for comp in $(echo "$MIRROR_COMPONENTS"); do
        echo "bundling $c -> $comp"
        root=$rel$comp/binary-amd64
        mkdir -p $root
        for f in $(cat $MANIFEST | grep "^$c:" | cut -d ":" -f 2); do
            cp $LOCAL_REPOS/$f $root/$f
        done
        newpackages=$root/Packages
        apt-ftparchive packages $root > $newpackages
        oldpackages=$LOCAL_REPOS/$c.$comp.packages
        if [ -e $oldpackages ]; then
            diff -u $oldpackages $newpackages
            if [ $? -ne 0 ]; then
                echo
                read -p "please review changes to $c:$comp (enter to continue)"
                echo
            fi
        fi
        cp $newpackages $oldpackages
        gzip -c --keep --force -9 $newpackages > $newpackages.gz
    done
    release=${rel}Release
    echo "Suite: $c" > $release
    echo "Codename: $codename" >> $release
    echo "$dated" > ${rel}Date
    echo "Components: $MIRROR_COMPONENTS" >> $release
    apt-ftparchive release $rel >> $release
    gpg --clearsign --digest-algo SHA512 --local-user $DEB_SIGN_KEY -o ${rel}InRelease $release
    if [ $? -ne 0 ]; then
        echo "unable to sign release"
        exit 1
    fi
    gpg --yes -abs --local-user $DEB_SIGN_KEY -o ${rel}Release.gpg $release
    if [ $? -ne 0 ]; then
        echo "unable to sign release"
        exit 1
    fi
done

tar cvzf $PACKED dists/

server=$MIRROR_SERVER
read -p "upload ($server)? (Y/n) " yn
if [[ "$yn" != "n" ]]; then
    echo "preparing index files"
    _dl() {
        curl -s "https://voidedtech.com/cgit/debs/plain/$1" >> $(basename $1)
        if [ $? -ne 0 ]; then
            echo "unable to retrieve $1"
            exit 1
        fi
    }
    for f in .index/header.html README.md .index/footer.html .index/package.css; do
        _dl $f
    done
    html=index.html
    cat header.html > $html
    cat README.md | markdown >> $html
    cat footer.html >> $html
    echo "packing..."
    pack=upload.tar.gz
    conf=configure
    echo "#!/bin/bash
if [ ! -d 'dists' ]; then
    echo 'missing dists folder, right dir?'
    exit 1
fi
mkdir -p archive
for f in \$(find dists/ -type f -name \"*.deb\"); do
    mv \$f archive/\$(basename \$f)
done
for f in \$(find archive/ -type f -mtime +90); do
    echo \"removing \$f\"
    rm -f \$f
done
rm $pack
tar xf $PACKED
rm $PACKED
rm configure
" > $conf
    chmod u+x $conf
    tmpf=$(mktemp).tar.gz
    tar cvzf $tmpf $conf $html package.css $PACKED
    mv $tmpf $pack
    scp $pack $server:~/
fi

rm -rf $tmpdir
