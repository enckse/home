#!/usr/bin/python3
"""Debian package uploading."""
import os
import tempfile
import debian
import common
import shutil
import subprocess
import urllib.request
import datetime


_REPOS = {"stable": "buster", "unstable": "sid"}
_OPT_DEB = "/opt/debian"
_ARCHIVE = os.path.join(_OPT_DEB, "archive")
_SNAP = "snapshot-"


def _run_ssh(env, cmd):
    subprocess.call(["ssh", debian.MIRROR] + cmd)


def _upload(env):
    """Upload the package."""
    target = "{}:{}".format(debian.MIRROR, _OPT_DEB)
    dt = datetime.datetime.now().strftime("{}%Y-%m-%dT%H-%M-%S".format(_SNAP))
    _run_ssh(env, ["find",
                   _ARCHIVE,
                   "-maxdepth",
                   "1",
                   "-mtime",
                   "30",
                   "-type",
                   "d",
                   "-name",
                   "{}*".format(_SNAP),
                   "-exec",
                   "rm",
                   "-rf",
                   "{}",
                   "\\;"])
    _run_ssh(env, ["cp",
                   "-r",
                   os.path.join(_OPT_DEB, debian.DISTS),
                   os.path.join(_ARCHIVE, dt)])
    subprocess.call(["rsync",
                     "-avc",
                     "-e",
                     "ssh",
                     debian.DISTS,
                     target,
                     "--delete-after"])


def _pack(env, pool, objects, components):
    """Package pools."""
    print("preparing...")
    repos = sorted(set([x.repo for x in objects]))
    for r in repos:
        if r not in _REPOS:
            raise Exception("unknown repo")
        codename = _REPOS[r]
        dist = os.path.join("dists", r)
        for comp in components:
            root = os.path.join(dist, comp, "binary-amd64")
            os.makedirs(root)
            flt = [debian.IS_ALL, comp]
            debs = [x.deb for x in objects if x.repo == r and x.filter in flt]
            for d in debs:
                shutil.copyfile(os.path.join(pool, d),
                                os.path.join(root, d))
            packages = os.path.join(root, "Packages")
            with open(packages, 'w') as f:
                subprocess.call(["apt-ftparchive", "packages", root], stdout=f)
            old_packages = os.path.join(pool, "{}.{}.packages".format(r, comp))
            if os.path.exists(old_packages):
                res = subprocess.call(["diff", "-u", old_packages, packages])
                if res != 0:
                    print("please review changes to {}:{}".format(r, comp))
                    input()
                    shutil.copyfile(packages, old_packages)
            package_gz = packages + ".gz"
            with open(package_gz, 'w') as f:
                subprocess.call(["gzip",
                                 "-c",
                                 "--keep",
                                 "--force",
                                 "-9",
                                 packages],
                                stdout=f)
        with open(os.path.join(dist, "Date"), 'w') as f:
            subprocess.call(["date", "+%Y-%m-%d-%H-%M-%S"], stdout=f)
        release_file = os.path.join(dist, "Release")
        with open(release_file, 'w') as f:
            obj = {"Suite": r,
                   "Codename": codename,
                   "Components": components}
            for o in obj:
                f.write("{}: {}\n".format(o, obj[o]))
        with open(release_file, 'a') as f:
            subprocess.call(["apt-ftparchive", "release", dist], stdout=f)
        subprocess.call(["gpg",
                         "--clearsign",
                         "--digest-algo",
                         "SHA512",
                         "--local-user",
                         env.DEB_SIGN_KEY,
                         "-o",
                         os.path.join(dist, "InRelease"),
                         release_file])
        subprocess.call(["gpg",
                         "--yes",
                         "-abs",
                         "--local-user",
                         env.DEB_SIGN_KEY,
                         "-o",
                         release_file + ".gpg",
                         release_file])
    return True


def main():
    """Program entry."""
    deb_env = common.read_env()
    if not os.path.exists(deb_env.REPOSITORY):
        print("invalid input path")
        return
    mani = os.path.join(deb_env.REPOSITORY, debian.MANIFEST)
    m = debian.parse_manifest(mani)
    comps = sorted(set([x.filter for x in m if x.filter != debian.IS_ALL]))
    tmpd = tempfile.mkdtemp()
    try:
        os.chdir(tmpd)
        if _pack(deb_env, deb_env.REPOSITORY, m, comps):
            _upload(deb_env)
        shutil.rmtree(tmpd)
    except Exception as e:
        shutil.rmtree(tmpd)
        raise


if __name__ == "__main__":
    main()
