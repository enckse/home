#!/usr/bin/python3
"""TOTP generation."""
import common
import sys
import os
import datetime
import subprocess
import time


_PASS_TOTP = "totp/"


def _list(env):
    """List totp options."""
    d = os.path.join(env.PASS_LOC, _PASS_TOTP)
    for f in sorted(os.listdir(d)):
        yield f.replace(".gpg", "")


def _display(env, args):
    """Display totp tokens."""
    listed = list(_list(env))
    args_len = len(args)
    if args_len > 0:
        listed = [x for x in listed if x in args]
        if len(listed) == 0:
            print("no totp names match input")
            return
        if len(listed) != args_len:
            print("input mismatch (tokens != retrieved)")
            return
    last_second = -1
    running_count = 0
    use_tokens = {}
    use_env = {}
    use_env["PASSWORD_STORE_DIR"] = env.PASS_LOC
    if len(listed) > 1:
        print('getting tokens...')
    for l in listed:
        totp = os.path.join(_PASS_TOTP, l)
        val, err = common.get_output_or_error(["pass", "show", totp],
                                              env=use_env)
        if err is not None:
            print("error accessing: " + l)
            print(err)
            return
        token = val.decode("utf-8").strip()
        use_tokens[l] = token
    if len(use_tokens) == 0:
        print("no tokens found...")
        return
    is_first = True
    while True:
        if is_first:
            is_first = False
        else:
            time.sleep(0.5)
        running_count += 1
        if running_count > 120:
            print("exiting")
            return
        output = []
        n = datetime.datetime.now()
        if n.second == last_second:
            continue
        last_second = n.second
        left = 60 - n.second
        expiring = "{}, expires: {} (seconds)".format(n.strftime("%H:%M:%S"),
                                                      left)
        output.append(expiring)
        for l in use_tokens.keys():
            val, err = common.get_output_or_error(["oathtool",
                                                   "--base32",
                                                   "--totp",
                                                   use_tokens[l]])
            if err is not None:
                print("unable to get token: " + l)
                print(err)
                continue
            oath = val.decode("utf-8").strip()
            msg = "\n{}\n    {}".format(l, oath)
            output.append(msg)
        subprocess.call(["clear"])
        if left < 10:
            common.red_text()
        else:
            common.normal_text()
        output.append("\n-> CTRL+C to exit")
        line = "\n".join(output).strip()
        print(line)
        common.normal_text()


def main():
    """Program entry."""
    args = []
    listing = False
    if len(sys.argv) > 1:
        args = sys.argv[1:]
        listing = len(args) == 1 and args[0] == "_list_"
    env = common.read_env()
    env.PASS_LOC = os.path.join(env.PERM_LOCATION, "pass", env.TOTP_PASS)
    if listing:
        for l in _list(env):
            print(l)
    else:
        _display(env, args)


if __name__ == "__main__":
    main()
