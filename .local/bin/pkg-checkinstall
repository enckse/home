#!/bin/bash
BIN="bin/"
DEBIAN="debian/"
HOME_CONFIG="$HOME/.config/epiphyte/env"
PACKAGE_FILE="PKG"
LINT_FILE="LINT"
LINT_LOG="lint.log"

BUILDDEPS=("make"
           "git"
           "debhelper"
           "bash-completion"
           "quilt"
           "dh-make")
for f in "${BUILDDEPS[@]}"; do
    PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $f|grep "install ok installed")
    if [ "" == "$PKG_OK" ]; then
        deps="$deps $f"
    fi
done
if [[ ! -z "$deps" ]]; then
    sudo apt-get install $deps
    if [ $? -ne 0 ]; then
        echo "unable to install deps, aborting"
         exit 1
    fi
    echo "installed dependencies, please rerun"
    exit 0
fi

CAN_RESET=1
CAN_CHECKOUT=1
CAN_PULL=1
CLEAN=1
NO_VERS=0
SHALLOW_CLONE=1
ALLOW_GOPATH=1
for i in "$@"; do
    case $i in
    --no-version)
        NO_VERS=1
        ;;
    --no-clean)
        CLEAN=0
        ;;
    --no-checkout)
        CAN_CHECKOUT=0
        ;;
    --no-reset)
        CAN_RESET=0
        ;;
    --no-pull)
        CAN_PULL=0
        ;;
    --full-clone)
        SHALLOW_CLONE=0
        ;;
    --no-gopath)
        ALLOW_GOPATH=0
        ;;
    *)
        echo "unknown option: $i"
        exit 1
        ;;
    esac
done

if [ ! -e "$PACKAGE_FILE" ]; then
    echo "$PACKAGE_FILE is missing"
    exit 1
fi

source $PACKAGE_FILE
if [ -e "$HOME_CONFIG" ]; then
    source $HOME_CONFIG
fi

if [ ! -d "$DEB_BUILD_DIR" ]; then
    echo "invalid build dir (not set?): $DEB_BUILD_DIR"
    exit 1
fi
if [ ! -d "$DEB_BUILD_GO" ]; then
    echo "no build dir set for go"
    exit 1
fi

_step() {
    if [ -z "$1" ]; then
        echo $2
    else
        echo $1
    fi
}

if [ $(_step $DISABLE_GOPATH $ALLOW_GOPATH) -eq 1 ]; then
    export GOPATH="${DEB_BUILD_GO}"
fi
if [ ! -e "$LINT_FILE" ]; then
    echo "missing $LINT_FILE output file"
    exit 1
fi

_required() {
    if [ -z "$1" ]; then
        echo "$2 missing value"
        exit 1
    fi    
}

PKGVER=$(cat debian/changelog | head -n 1 | cut -d "(" -f 2 | cut -d "-" -f 1)
if [ -z "$PKGVER" ]; then
    echo "unable to detect version"
    exit 1
fi

echo "found version: $PKGVER"
_required "$URL" "URL"
_required "$DEB_SIGN_KEY" "DEB_SIGN_KEY"
gitdirname=$DEB_BUILD_DIR$NAME-$PKGVER
if [ $(_step $DO_CLEAN $CLEAN) -eq 1 ]; then
    echo "cleaning up directory"
    rm -rf $gitdirname
fi
gitargs=""
if [ $(_step $GIT_CHECKOUT $CAN_CHECKOUT) -eq 1 ]; then
    gitver="$PKGVER"
    if [ ! -z "$GIT_VER" ]; then
        gitver=$(echo "$GIT_VER" | sed "s/PKGVER/$PKGVER/g")
    fi
    gitargs="--branch $gitver"
fi
if [ $(_step $GIT_SHALLOW $SHALLOW_CLONE) -eq 1 ]; then
    gitargs="$gitargs --depth 1"
fi
if [ ! -d $gitdirname ]; then
    git clone $gitargs $URL $gitdirname
    if [ $? -ne 0 ]; then
        echo "unable to clone"
        exit 1
    fi
fi

cwd=$PWD
_exit() {
    echo "${@:2}"
    cd $cwd
    exit $1
}

cd $gitdirname
if [ ! -d .git/ ]; then
    _exit 1 "not a git directory, aborting"
fi
if [ $(_step $GIT_RESET $CAN_RESET) -eq 1 ]; then
    git reset --hard
    if [ $? -ne 0 ]; then
        _exit 1 "unable to reset"
    fi
fi
origname="../${NAME}_$PKGVER.orig.tar.xz"
if [ $(_step $GIT_PULL $CAN_PULL) -eq 0 ]; then
    git pull
    rm -f $origname
fi

if [ -d ".git/" ]; then
    rm -rf .git/
fi

rm -rf $DEBIAN
rm -rf .pc/
cp -vr $cwd/$DEBIAN .
cleanname="../${NAME}_*"
rm -f $cleanname
if [ $(_step $MAKE_VERS $NO_VERS) -eq 0 ]; then
    echo "adjusting VERSION in Makefile(s)"
    for f in $(find . -type f -name "Makefile"); do
        echo "checking: $f"
        cat $f | grep "^VERSION" | grep -q "DEVELOP"
        if [ $? -eq 0 ]; then
            echo "adjusting $f"
            sed -i '/^VERSION/ d' $f
            sed -i "1s/^/VERSION := $PKGVER\n/" $f
        fi
    done
fi
if [ ! -e $origname ]; then
    echo "creating $origname"
    dh_make -s -y --createorig
fi
dpkg-buildpackage -us -uc
if [ $? -ne 0 ]; then
    _exit 1 "package generation failed..."
fi
localbin=$cwd/$BIN/
rm -rf $localbin
mkdir -p $localbin
mv ../*.deb $localbin
mv $cleanname $localbin/
lintian $localbin/*.deb | sort > $localbin$LINT_LOG
diff -u $localbin$LINT_LOG $cwd/$LINT_FILE
if [ $? -ne 0 ]; then
    _exit 1 "lint change detected..."
fi
debsigs --sign=origin -k $DEB_SIGN_KEY $localbin*.deb
if [ $? -ne 0 ]; then
    _exit 1 "unable to sign..."
fi
echo
files=$cwd/install.manifest
echo "files:" > $files
for d in $(ls $localbin*.deb); do
    name=$(basename $d | cut -d "_" -f 1)
    dpkg -c $d | awk '{print $6}' | sed "s#^./##g" | grep -v "^$" | sed "s/^/$name: /g" | sort >> $files
done
_exit 0 "done"
