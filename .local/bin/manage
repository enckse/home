#!/usr/bin/python3
import common
import argparse
import os
import tempfile
import subprocess


_PURGE = ["mv",
          "cp",
          "rm",
          "clear",
          "exit",
          "mkdir",
          "vim",
          "ls"
          "manage",
          "pkg-deb",
          "pkg-pool",
          "pkg-upload",
          "less",
          "wsw",
          "pkill",
          "i3",
          "volume",
          "locking"]


_NAME_IGNORES = [".bash_history", "pacman", "reboot", "poweroff"]
_BY_SIZE = {
        "ssh": 3,
        "scp": 3,
        "git": 2,
        "cat": 2,
        "apt-get": 3,
        "apt-cache": 3,
        "aptitude": 2,
        "dpkg": 2,
        "find": 2,
        "apt": 2,
        "sudo": 2,
        "python": 2,
        "python3": 2,
        "schroot": 3,
        "python2": 2}


def _history_dryrun(message, line):
    """Report history dryrun purges."""
    print("{} -> ({})".format(line, message))
    return 1


def _history(env, purge):
    """Manage bash history."""
    hist = os.path.join(env.HOME, ".bash_history")
    tmp = hist + ".tmp"
    lines = []
    cnt = 0
    with open(hist, 'r') as f:
        for line in f:
            ls = line.strip()
            adding = True
            if len(ls) < 11:
                cnt += _history_dryrun("less than 10 chars", ls)
            for p in _PURGE:
                if ls.startswith("{} ".format(p)) or ls == p:
                    adding = False
                    cnt += _history_dryrun(p + " blacklisted", ls)
                    break
            for i in _NAME_IGNORES:
                if i in ls:
                    adding = False
                    cnt += _history_dryrun("ignored " + i, ls)
            for b in _BY_SIZE:
                parts = ls.split(" ")
                sized = _BY_SIZE[b]
                if len(parts) <= sized:
                    if parts[0] == b:
                        adding = False
                        msg = "short command {} ({})".format(b, str(sized))
                        cnt += _history_dryrun(msg, ls)
                        break
            if line in lines:
                cnt += _history_dryrun("line not unique", ls)
                adding = False
            if adding:
                lines.append(line)
    if purge:
        with open(tmp, 'w') as f:
            for l in lines:
                f.write(l)
        os.remove(hist)
        os.rename(tmp, hist)
    print("purging: " + str(cnt))
    if not purge:
        print("^^^ DRYRUN ^^^")


def _music(env):
    """Synchronize music."""
    music_file = os.path.join(env.PERM_CONFIGS, "music")
    includes = []
    chars = []
    with open(music_file, 'r') as f:
        for l in f:
            strip = l.strip()
            c = strip[0] + "/"
            if c not in chars:
                includes.append(c)
                chars.append(c)
            includes.append(c + strip + "/***")
    with tempfile.NamedTemporaryFile() as tmp:
        for l in includes:
            tmp.write((l + "\n").encode("UTF-8"))
        tmp.flush()
        subprocess.call(["rsync",
                         "-av",
                         "--include-from",
                         tmp.name,
                         '--exclude',
                         '*',
                         env.BASE_SERVER + ":store/Home/Media/Music/",
                         os.path.join(env.HOME_CACHE, "music"),
                         "--delete-after",
                         "--delete-excluded"])


def _git_updates(env):
    for r, f, d in os.walk(env.PERM_LOCATION):
        if "personal" in r:
            continue
        git_dir = os.path.join(r, ".git")
        if os.path.exists(git_dir):
            print("")
            print(r)
            print("")
            subprocess.call(["git", "-C", r, "pull"])
            print("")


def main():
    """Program entry."""
    parser = argparse.ArgumentParser()
    parser.add_argument("command")
    args = parser.parse_args()
    env = common.read_env()
    if args.command == "music":
        _music(env)
    elif args.command == "history-dryrun":
        _history(env, False)
    elif args.command == "history-purge":
        _history(env, True)
    elif args.command == "git-update-store":
        _git_updates(env)
    else:
        print("unknown command")


if __name__ == "__main__":
    main()
